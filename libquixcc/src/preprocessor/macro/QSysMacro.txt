
/* --> LIST OF QSYS CALLS:
* NOTE: The QSyscall numbers and behavior is not guaranteed
* to be consistent across different versions of the language.
* 
* 0: Reserved
* 
* ----------------- TEXT IO -----------------
* 0001: Write to Compiler Standard Output   ; fn(msg: string, formatted: bool, flush: bool): void?;
* 0002: Write to Compiler Standard Error    ; fn(msg: string, formatted: bool, flush: bool): void?;
* 0003: Read from Compiler Standard Input   ; fn(prompt: string = ""): string;
* 0004. Terminal Clear                      ; fn(): void?;
* 0005. Terminal Set Title                  ; fn(title: string): void?;
* 0006. Terminal Set Color                  ; fn(fg: int, bg: int): void?;
* 0007. Terminal Set Cursor Position        ; fn(x: int, y: int): void?;
* 0008. Terminal Set Cursor Visibility      ; fn(visible: bool): void?;
* 0009. Terminal Set Cursor Blink Rate      ; fn(rate: int): void?;
* 000A. Terminal Enable Echo                ; fn(enabled: bool): void?;
* 000B. Terminal Bell                       ; fn(): void?;
* 000C. Terminal Set Size                   ; fn(width: int, height: int): void?;
* 000D. Terminal Set Font                   ; fn(font: string): void?;
* 
* ----------------- FILE IO -----------------
* 00F0. Open local file                     ; fn(path: string, mode: string): u64?;
* 00F1. Close local file                    ; fn(handle: u64): void?;
* 00F2. Read local file                     ; fn(handle: u64, size: u64): string?;
* 00F3. Write local file                    ; fn(handle: u64, data: string): void?;
* 00F4. Seek local file                     ; fn(handle: u64, offset: u64, whence: <set, cur, end>): void?;
* 00F5. Tell local file                     ; fn(handle: u64): u64?;
* 00F6. Flush local file                    ; fn(handle: u64): void?;
* 00F7. Delete local file                   ; fn(path: string): void?;
* 00F8. Rename local file                   ; fn(old: string, new: string): void?;
* 00F9. Create local directory              ; fn(path: string): void?;
* 00FA. Delete local directory              ; fn(path: string): void?;
* 00FB. Rename local directory              ; fn(old: string, new: string): void?;
* 00FC. List local directory                ; fn(path: string): string[];
* 00FD. Get local file attributes           ; fn(path: string): {size: u64, created: u64, modified: u64, accessed: u64}?;
* 00FE. Set local file attributes           ; fn(path: string, attributes: {size: u64, created: u64, modified: u64, accessed: u64}): void?;
* 
* ------------------ SYSTEM -----------------
* 01F0. Get Compiler Version                ; fn(): {vendor: string, major: int, minor: int, patch: int, build: int};
* 01F1. Get Compiler Flags                  ; fn(): [string];
* 01F2. Unset Compiler Flag                 ; fn(flag: string): void?;
* 01F3. Set Compiler Flag                   ; fn(flag: string, value: string): void?;
* 01F4. Get Compiler Log File               ; fn(): string?;
* 01F5. Execute OS Command and Get Output   ; fn(cmd: string): {exit_code: int, output: string}?;
* 01F6. Abort Compilation successfully      ; fn(msg: string): null;
* 
* ----------------- NETWORK -----------------
* 03F0. Open Network Connection             ; fn(uri: string): u64?;
* 03F1. Close Network Connection            ; fn(handle: u64): void?;
* 03F2. Read Network Connection             ; fn(handle: u64, size: u64): string?;
* 03F3. Write Network Connection            ; fn(handle: u64, data: string): void?;
* 03F4-03FF. Reserved
* 
* ----------------- LANGUAGE ----------------
* 0FF0. Compile and Execute QUIX            ; fn(code: string, flags: [string], version: string): {exit_code: int, output: string}?;
* 0FF1. Get type of item                    ; fn(code: string): string?;
* 0FF2. Undefine a function                 ; fn(name: string): void?;
* 0FF3. Undefine a macro                    ; fn(name: string): void?;
* 0FF4. Undeclare an item                   ; fn(name: string): void?;
* 0FF5. Get the body of a macro             ; fn(name: string): string?;
* 0FF6. Get the body of a function          ; fn(name: string): string?;
* 0FF7. Get the body of a type              ; fn(name: string): string?;
* 0FF8. Set a global meta variable          ; fn(name: string, value: string): void?;
* 0FF9. Get a global meta variable          ; fn(name: string): string?;
**/
