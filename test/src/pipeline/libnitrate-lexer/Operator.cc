#include <gtest/gtest.h>

#include <pipeline/libnitrate-lexer/LexicalCase.hh>

using namespace ncc::lex;

#pragma clang optimize off

///============================================================================///
/// BUILTIN OPERATORS
TEST_CASE(Operator, Symbol, 0, "+", {OpPlus, Token()});
TEST_CASE(Operator, Symbol, 1, "-", {OpMinus, Token()});
TEST_CASE(Operator, Symbol, 2, "*", {OpTimes, Token()});
TEST_CASE(Operator, Symbol, 3, "/", {OpSlash, Token()});
TEST_CASE(Operator, Symbol, 4, "%", {OpPercent, Token()});
TEST_CASE(Operator, Symbol, 5, "&", {OpBitAnd, Token()});
TEST_CASE(Operator, Symbol, 6, "|", {OpBitOr, Token()});
TEST_CASE(Operator, Symbol, 7, "^", {OpBitXor, Token()});
TEST_CASE(Operator, Symbol, 8, "~", {OpBitNot, Token()});
TEST_CASE(Operator, Symbol, 9, "<<", {OpLShift, Token()});
TEST_CASE(Operator, Symbol, 10, ">>", {OpRShift, Token()});
TEST_CASE(Operator, Symbol, 12, "<<<", {OpROTL, Token()});
TEST_CASE(Operator, Symbol, 13, ">>>", {OpROTR, Token()});
TEST_CASE(Operator, Symbol, 14, "&&", {OpLogicAnd, Token()});
TEST_CASE(Operator, Symbol, 15, "||", {OpLogicOr, Token()});
TEST_CASE(Operator, Symbol, 16, "^^", {OpLogicXor, Token()});
TEST_CASE(Operator, Symbol, 17, "!", {OpLogicNot, Token()});
TEST_CASE(Operator, Symbol, 18, "<", {OpLT, Token()});
TEST_CASE(Operator, Symbol, 19, ">", {OpGT, Token()});
TEST_CASE(Operator, Symbol, 20, "<=", {OpLE, Token()});
TEST_CASE(Operator, Symbol, 21, ">=", {OpGE, Token()});
TEST_CASE(Operator, Symbol, 22, "==", {OpEq, Token()});
TEST_CASE(Operator, Symbol, 23, "!=", {OpNE, Token()});
TEST_CASE(Operator, Symbol, 24, "=", {OpSet, Token()});
TEST_CASE(Operator, Symbol, 25, "+=", {OpPlusSet, Token()});
TEST_CASE(Operator, Symbol, 26, "-=", {OpMinusSet, Token()});
TEST_CASE(Operator, Symbol, 27, "*=", {OpTimesSet, Token()});
TEST_CASE(Operator, Symbol, 28, "/=", {OpSlashSet, Token()});
TEST_CASE(Operator, Symbol, 29, "%=", {OpPercentSet, Token()});
TEST_CASE(Operator, Symbol, 30, "&=", {OpBitAndSet, Token()});
TEST_CASE(Operator, Symbol, 31, "|=", {OpBitOrSet, Token()});
TEST_CASE(Operator, Symbol, 32, "^=", {OpBitXorSet, Token()});
TEST_CASE(Operator, Symbol, 33, "&&=", {OpLogicAndSet, Token()});
TEST_CASE(Operator, Symbol, 34, "||=", {OpLogicOrSet, Token()});
TEST_CASE(Operator, Symbol, 35, "^^=", {OpLogicXorSet, Token()});
TEST_CASE(Operator, Symbol, 36, "<<=", {OpLShiftSet, Token()});
TEST_CASE(Operator, Symbol, 37, ">>=", {OpRShiftSet, Token()});
TEST_CASE(Operator, Symbol, 38, "<<<=", {OpROTLSet, Token()});
TEST_CASE(Operator, Symbol, 39, ">>>=", {OpROTRSet, Token()});
TEST_CASE(Operator, Symbol, 40, "++", {OpInc, Token()});
TEST_CASE(Operator, Symbol, 41, "--", {OpDec, Token()});
TEST_CASE(Operator, Symbol, 42, "as", {OpAs, Token()});
TEST_CASE(Operator, Symbol, 43, "bitcast_as", {OpBitcastAs, Token()});
TEST_CASE(Operator, Symbol, 44, "in", {OpIn, Token()});
TEST_CASE(Operator, Symbol, 45, "out", {OpOut, Token()});
TEST_CASE(Operator, Symbol, 46, "sizeof", {OpSizeof, Token()});
TEST_CASE(Operator, Symbol, 47, "bitsizeof", {OpBitsizeof, Token()});
TEST_CASE(Operator, Symbol, 48, "alignof", {OpAlignof, Token()});
TEST_CASE(Operator, Symbol, 49, "typeof", {OpTypeof, Token()});
TEST_CASE(Operator, Symbol, 50, "comptime", {OpComptime, Token()});
TEST_CASE(Operator, Symbol, 51, ".", {OpDot, Token()});
TEST_CASE(Operator, Symbol, 52, "..", {OpRange, Token()});
TEST_CASE(Operator, Symbol, 53, "...", {OpEllipsis, Token()});
TEST_CASE(Operator, Symbol, 54, "=>", {OpArrow, Token()});
TEST_CASE(Operator, Symbol, 55, "?", {OpTernary, Token()});

///============================================================================///
/// ADJACENT OPERATORS
TEST_CASE(Operator, Adjacent, 200, "++", {OpInc, Token()});
TEST_CASE(Operator, Adjacent, 201, "--", {OpDec, Token()});
TEST_CASE(Operator, Adjacent, 202, "**", {OpTimes, OpTimes, Token()});
TEST_CASE(Operator, Adjacent, 203, "//", {Token(Note, ""), Token()});
TEST_CASE(Operator, Adjacent, 204, "%%", {OpPercent, OpPercent, Token()});
TEST_CASE(Operator, Adjacent, 205, "&&", {OpLogicAnd, Token()});
TEST_CASE(Operator, Adjacent, 206, "||", {OpLogicOr, Token()});
TEST_CASE(Operator, Adjacent, 207, "^^", {OpLogicXor, Token()});
TEST_CASE(Operator, Adjacent, 208, "~~", {OpBitNot, OpBitNot, Token()});
TEST_CASE(Operator, Adjacent, 209, "<<<<", {OpROTL, OpLT, Token()});
TEST_CASE(Operator, Adjacent, 210, ">>>>", {OpROTR, OpGT, Token()});
TEST_CASE(Operator, Adjacent, 212, "<<<<<<", {OpROTL, OpROTL, Token()});
TEST_CASE(Operator, Adjacent, 213, ">>>>>>", {OpROTR, OpROTR, Token()});
TEST_CASE(Operator, Adjacent, 214, "&&&&", {OpLogicAnd, OpLogicAnd, Token()});
TEST_CASE(Operator, Adjacent, 215, "||||", {OpLogicOr, OpLogicOr, Token()});
TEST_CASE(Operator, Adjacent, 216, "^^^^", {OpLogicXor, OpLogicXor, Token()});
TEST_CASE(Operator, Adjacent, 217, "!!", {OpLogicNot, OpLogicNot, Token()});
TEST_CASE(Operator, Adjacent, 218, "<<", {OpLShift, Token()});
TEST_CASE(Operator, Adjacent, 219, ">>", {OpRShift, Token()});
TEST_CASE(Operator, Adjacent, 220, "<=<=", {OpLE, OpLE, Token()});
TEST_CASE(Operator, Adjacent, 221, ">=>=", {OpGE, OpGE, Token()});
TEST_CASE(Operator, Adjacent, 222, "====", {OpEq, OpEq, Token()});
TEST_CASE(Operator, Adjacent, 223, "!=!=", {OpNE, OpNE, Token()});
TEST_CASE(Operator, Adjacent, 224, "==", {OpEq, Token()});
TEST_CASE(Operator, Adjacent, 225, "+=+=", {OpPlusSet, OpPlusSet, Token()});
TEST_CASE(Operator, Adjacent, 226, "-=-=", {OpMinusSet, OpMinusSet, Token()});
TEST_CASE(Operator, Adjacent, 227, "*=*=", {OpTimesSet, OpTimesSet, Token()});
TEST_CASE(Operator, Adjacent, 228, "/=/=", {OpSlashSet, OpSlashSet, Token()});
TEST_CASE(Operator, Adjacent, 229, "%=%=", {OpPercentSet, OpPercentSet, Token()});
TEST_CASE(Operator, Adjacent, 230, "&=&=", {OpBitAndSet, OpBitAndSet, Token()});
TEST_CASE(Operator, Adjacent, 231, "|=|=", {OpBitOrSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Adjacent, 232, "^=^=", {OpBitXorSet, OpBitXorSet, Token()});
TEST_CASE(Operator, Adjacent, 233, "&&=&&=", {OpLogicAndSet, OpLogicAndSet, Token()});
TEST_CASE(Operator, Adjacent, 234, "||=||=", {OpLogicOrSet, OpLogicOrSet, Token()});
TEST_CASE(Operator, Adjacent, 235, "^^=^^=", {OpLogicXorSet, OpLogicXorSet, Token()});
TEST_CASE(Operator, Adjacent, 236, "<<=<<=", {OpLShiftSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Adjacent, 237, ">>=>>=", {OpRShiftSet, OpRShiftSet, Token()});
TEST_CASE(Operator, Adjacent, 238, "<<<=<<<=", {OpROTLSet, OpROTLSet, Token()});
TEST_CASE(Operator, Adjacent, 239, ">>>=>>>=", {OpROTRSet, OpROTRSet, Token()});
TEST_CASE(Operator, Adjacent, 240, "++++", {OpInc, OpInc, Token()});
TEST_CASE(Operator, Adjacent, 241, "----", {OpDec, OpDec, Token()});
TEST_CASE(Operator, Adjacent, 242, "asas", {Token(Name, "asas"), Token()});
TEST_CASE(Operator, Adjacent, 243, "bitcast_asbitcast_as", {Token(Name, "bitcast_asbitcast_as"), Token()});
TEST_CASE(Operator, Adjacent, 244, "inin", {Token(Name, "inin"), Token()});
TEST_CASE(Operator, Adjacent, 245, "outout", {Token(Name, "outout"), Token()});
TEST_CASE(Operator, Adjacent, 246, "sizeofsizeof", {Token(Name, "sizeofsizeof"), Token()});
TEST_CASE(Operator, Adjacent, 247, "bitsizeofbitsizeof", {Token(Name, "bitsizeofbitsizeof"), Token()});
TEST_CASE(Operator, Adjacent, 248, "alignofalignof", {Token(Name, "alignofalignof"), Token()});
TEST_CASE(Operator, Adjacent, 249, "typeoftypeof", {Token(Name, "typeoftypeof"), Token()});
TEST_CASE(Operator, Adjacent, 250, "comptimecomptime", {Token(Name, "comptimecomptime"), Token()});
TEST_CASE(Operator, Adjacent, 251, "..", {OpRange, Token()});
TEST_CASE(Operator, Adjacent, 252, "....", {OpEllipsis, OpDot, Token()});
TEST_CASE(Operator, Adjacent, 253, "......", {OpEllipsis, OpEllipsis, Token()});
TEST_CASE(Operator, Adjacent, 254, "=>=>", {OpArrow, OpArrow, Token()});
TEST_CASE(Operator, Adjacent, 255, "??", {OpTernary, OpTernary, Token()});

///============================================================================///
/// OPERATOR PERMUTATIONS
TEST_CASE(Operator, Permute, 0, R"(.->*=)", {OpDot, OpMinus, OpGT, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 1, R"(&>>>=<=..)", {OpBitAnd, OpROTRSet, OpLE, OpRange, Token()});
TEST_CASE(Operator, Permute, 2, R"(=/&&<<=)", {OpSet, OpSlash, OpLogicAnd, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 3, R"(<<<=/<<<..)", {OpROTLSet, OpSlash, OpROTL, OpRange, Token()});
TEST_CASE(Operator, Permute, 4, R"(>>=|=><<=)", {OpRShiftSet, OpBitOrSet, OpGT, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 5, R"(&&>>>..%)", {OpLogicAnd, OpROTR, OpRange, OpPercent, Token()});
TEST_CASE(Operator, Permute, 6, R"(|<<%==)", {OpBitOr, OpLShift, OpPercentSet, OpSet, Token()});
TEST_CASE(Operator, Permute, 7, R"(^^=<<<=.<<<)", {OpLogicXorSet, OpROTLSet, OpDot, OpROTL, Token()});
TEST_CASE(Operator, Permute, 8, R"(>=&&=^^--)", {OpGE, OpLogicAndSet, OpLogicXor, OpDec, Token()});
TEST_CASE(Operator, Permute, 9, R"(<<|=^^=)", {OpLShift, OpBitOrSet, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 10, R"(||=/^^=!=)", {OpLogicOrSet, OpSlash, OpLogicXorSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 11, R"(>=.....&&=)", {OpGE, OpEllipsis, OpRange, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 12, R"(|>>=<=>=)", {OpBitOr, OpRShiftSet, OpLE, OpGE, Token()});
TEST_CASE(Operator, Permute, 13, R"(<<=*|++)", {OpLShiftSet, OpTimes, OpBitOr, OpInc, Token()});
TEST_CASE(Operator, Permute, 14, R"(++<<^^~)", {OpInc, OpLShift, OpLogicXor, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 15, R"(<<<&&!=*=)", {OpROTL, OpLogicAnd, OpNE, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 16, R"(^!===%=)", {OpBitXor, OpNE, OpEq, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 17, R"(^>=<<=?)", {OpBitXor, OpGE, OpLShiftSet, OpTernary, Token()});
TEST_CASE(Operator, Permute, 18, R"(.<<^=)", {OpDot, OpLShift, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 19, R"(^^?-!=)", {OpLogicXor, OpTernary, OpMinus, OpNE, Token()});
TEST_CASE(Operator, Permute, 20, R"(*!=--/)", {OpTimes, OpNE, OpDec, OpSlash, Token()});
TEST_CASE(Operator, Permute, 21, R"(<>^^=<<<=)", {OpLT, OpGT, OpLogicXorSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 22, R"(/...^^<<=)", {OpSlash, OpEllipsis, OpLogicXor, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 23, R"(^^=-<<<&&)", {OpLogicXorSet, OpMinus, OpROTL, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 24, R"(||=^=<<<<)", {OpLogicOrSet, OpBitXorSet, OpROTL, OpLT, Token()});
TEST_CASE(Operator, Permute, 25, R"(-!=<<=>>>)", {OpMinus, OpNE, OpLShiftSet, OpROTR, Token()});
TEST_CASE(Operator, Permute, 26, R"(..%=&=*=)", {OpRange, OpPercentSet, OpBitAndSet, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 27, R"(|^^=&||=)", {OpBitOr, OpLogicXorSet, OpBitAnd, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 28, R"(!=*=~=)", {OpNE, OpTimesSet, OpBitNot, OpSet, Token()});
TEST_CASE(Operator, Permute, 29, R"(^..!~)", {OpBitXor, OpRange, OpLogicNot, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 30, R"(..+%=<<)", {OpRange, OpPlus, OpPercentSet, OpLShift, Token()});
TEST_CASE(Operator, Permute, 31, R"(!./=|=)", {OpLogicNot, OpDot, OpSlashSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 32, R"(||=+=<<|)", {OpLogicOrSet, OpPlusSet, OpLShift, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 33, R"(++-=<<=>)", {OpInc, OpMinusSet, OpLShiftSet, OpGT, Token()});
TEST_CASE(Operator, Permute, 34, R"(^^=...%=-=)", {OpLogicXorSet, OpEllipsis, OpPercentSet, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 35, R"(||...^&)", {OpLogicOr, OpEllipsis, OpBitXor, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 36, R"(^>>--?)", {OpBitXor, OpRShift, OpDec, OpTernary, Token()});
TEST_CASE(Operator, Permute, 37, R"(...>=-=/=)", {OpEllipsis, OpGE, OpMinusSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 38, R"(|>=<<%)", {OpBitOr, OpGE, OpLShift, OpPercent, Token()});
TEST_CASE(Operator, Permute, 39, R"(*=./>=)", {OpTimesSet, OpDot, OpSlash, OpGE, Token()});
TEST_CASE(Operator, Permute, 40, R"(!=<<<*>=)", {OpNE, OpROTL, OpTimes, OpGE, Token()});
TEST_CASE(Operator, Permute, 41, R"(...&+=^)", {OpEllipsis, OpBitAnd, OpPlusSet, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 42, R"(...&^<<)", {OpEllipsis, OpBitAnd, OpBitXor, OpLShift, Token()});
TEST_CASE(Operator, Permute, 43, R"(%&&&&=<=)", {OpPercent, OpLogicAnd, OpLogicAndSet, OpLE, Token()});
TEST_CASE(Operator, Permute, 44, R"(>>>=<<<-=||)", {OpROTRSet, OpROTL, OpMinusSet, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 45, R"(>>=<==<<<=)", {OpRShiftSet, OpLE, OpSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 46, R"(>>=<=*>>)", {OpRShiftSet, OpLE, OpTimes, OpRShift, Token()});
TEST_CASE(Operator, Permute, 47, R"(<^^=|&)", {OpLT, OpLogicXorSet, OpBitOr, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 48, R"(...>>>=++)", {OpEllipsis, OpROTRSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 49, R"(>>=>=<<<<)", {OpRShiftSet, OpGE, OpROTL, OpLT, Token()});
TEST_CASE(Operator, Permute, 50, R"(/==++=)", {OpSlashSet, OpSet, OpInc, OpSet, Token()});
TEST_CASE(Operator, Permute, 51, R"(>>=<=~>)", {OpRShiftSet, OpLE, Token(Note, ""), Token()});
TEST_CASE(Operator, Permute, 52, R"(||=<<<!=)", {OpLogicOrSet, OpROTL, OpNE, Token()});
TEST_CASE(Operator, Permute, 53, R"(>=~>>&)", {OpGE, Token(Note, ">&"), Token()});
TEST_CASE(Operator, Permute, 54, R"(<>|=.)", {OpLT, OpGT, OpBitOrSet, OpDot, Token()});
TEST_CASE(Operator, Permute, 55, R"(^=&<|=)", {OpBitXorSet, OpBitAnd, OpLT, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 56, R"(&&=...<)", {OpLogicAndSet, OpEllipsis, OpLT, Token()});
TEST_CASE(Operator, Permute, 57, R"(=?^=++)", {OpSet, OpTernary, OpBitXorSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 58, R"(&=+<=>>)", {OpBitAndSet, OpPlus, OpLE, OpRShift, Token()});
TEST_CASE(Operator, Permute, 59, R"(.~<<<|=)", {OpDot, OpBitNot, OpROTL, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 60, R"(/>=&=|)", {OpSlash, OpGE, OpBitAndSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 61, R"(*<=^--)", {OpTimes, OpLE, OpBitXor, OpDec, Token()});
TEST_CASE(Operator, Permute, 62, R"(|||=-=)", {OpLogicOr, OpBitOrSet, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 63, R"(==>>=||=<<<=)", {OpEq, OpRShiftSet, OpLogicOrSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 64, R"(<<++>=|=)", {OpLShift, OpInc, OpGE, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 65, R"(+--!-)", {OpPlus, OpDec, OpLogicNot, OpMinus, Token()});
TEST_CASE(Operator, Permute, 66, R"(?...&=++)", {OpTernary, OpEllipsis, OpBitAndSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 67, R"(<<<%-=>=)", {OpROTL, OpPercent, OpMinusSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 68, R"(-=--...&&=)", {OpMinusSet, OpDec, OpEllipsis, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 69, R"(||=>=<=...)", {OpLogicOrSet, OpGE, OpLE, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 70, R"(.=>>=>>>=)", {OpDot, OpArrow, OpGE, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 71, R"(+===&&=^)", {OpPlusSet, OpEq, OpLogicAndSet, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 72, R"(^=--&&=+=)", {OpBitXorSet, OpDec, OpLogicAndSet, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 73, R"(==%..*=)", {OpEq, OpPercent, OpRange, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 74, R"(-=&&=^^)", {OpMinusSet, OpLogicAndSet, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 75, R"(>>>=>>=../)", {OpROTRSet, OpRShiftSet, OpRange, OpSlash, Token()});
TEST_CASE(Operator, Permute, 76, R"(-=&&^^=...)", {OpMinusSet, OpLogicAnd, OpLogicXorSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 77, R"(++?^^>>>)", {OpInc, OpTernary, OpLogicXor, OpROTR, Token()});
TEST_CASE(Operator, Permute, 78, R"(%^^=&&^=)", {OpPercent, OpLogicXorSet, OpLogicAnd, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 79, R"(>=..>-)", {OpGE, OpRange, OpGT, OpMinus, Token()});
TEST_CASE(Operator, Permute, 80, R"(>>=%=/===)", {OpRShiftSet, OpPercentSet, OpSlashSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 81, R"(<<<=.==^=)", {OpROTLSet, OpDot, OpEq, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 82, R"(>|=^^=~)", {OpGT, OpBitOrSet, OpLogicXorSet, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 83, R"(>>>><<..)", {OpGT, OpROTR, OpLShift, OpRange, Token()});
TEST_CASE(Operator, Permute, 84, R"(...=+==>)", {OpEllipsis, OpSet, OpPlusSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 85, R"(&=---/)", {OpBitAndSet, OpMinus, OpDec, OpSlash, Token()});
TEST_CASE(Operator, Permute, 86, R"(+|++!)", {OpPlus, OpBitOr, OpInc, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 87, R"(!&&=<<<=&&)", {OpLogicNot, OpLogicAndSet, OpROTLSet, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 88, R"(<=&&=<<<<<)", {OpLE, OpLogicAndSet, OpLShift, OpROTL, Token()});
TEST_CASE(Operator, Permute, 89, R"(^--^^=>>)", {OpBitXor, OpDec, OpLogicXorSet, OpRShift, Token()});
TEST_CASE(Operator, Permute, 90, R"(--^<=<<)", {OpDec, OpBitXor, OpLE, OpLShift, Token()});
TEST_CASE(Operator, Permute, 91, R"(>>>=-=+=>>)", {OpROTRSet, OpMinusSet, OpPlusSet, OpRShift, Token()});
TEST_CASE(Operator, Permute, 92, R"(*--!<)", {OpTimes, OpDec, OpLogicNot, OpLT, Token()});
TEST_CASE(Operator, Permute, 93, R"(<&->>=)", {OpLT, OpBitAnd, OpMinus, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 94, R"(&/===^^=)", {OpBitAnd, OpSlashSet, OpEq, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 95, R"(>=>>=?>>>=)", {OpGE, OpRShiftSet, OpTernary, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 96, R"(<||<<-)", {OpLT, OpLogicOr, OpLShift, OpMinus, Token()});
TEST_CASE(Operator, Permute, 97, R"(+=^^<=/)", {OpPlusSet, OpLogicXor, OpLE, OpSlash, Token()});
TEST_CASE(Operator, Permute, 98, R"(|=>&=~)", {OpBitOr, OpArrow, OpBitAndSet, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 99, R"(>>||&&=%)", {OpRShift, OpLogicOr, OpLogicAndSet, OpPercent, Token()});
TEST_CASE(Operator, Permute, 100, R"(>>>-=^^^^=)", {OpROTR, OpMinusSet, OpLogicXor, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 101, R"(||=!/=>=)", {OpLogicOrSet, OpLogicNot, OpSlashSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 102, R"(||=>=?--)", {OpLogicOrSet, OpGE, OpTernary, OpDec, Token()});
TEST_CASE(Operator, Permute, 103, R"(!&==>>>)", {OpLogicNot, OpBitAnd, OpEq, OpROTR, Token()});
TEST_CASE(Operator, Permute, 104, R"(*&=<=<<<)", {OpTimes, OpBitAndSet, OpLE, OpROTL, Token()});
TEST_CASE(Operator, Permute, 105, R"(%->>>=*=)", {OpPercent, OpMinus, OpROTRSet, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 106, R"(>>|=%===)", {OpRShift, OpBitOrSet, OpPercentSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 107, R"(=<<=+=>>>=)", {OpSet, OpLShiftSet, OpPlusSet, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 108, R"(/<<=<<^=)", {OpSlash, OpLShiftSet, OpLShift, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 109, R"(-=*!~)", {OpMinusSet, OpTimes, OpLogicNot, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 110, R"(^=...%=>>=)", {OpBitXorSet, OpEllipsis, OpPercentSet, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 111, R"(%!=+=|)", {OpPercent, OpNE, OpPlusSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 112, R"(>>>!=>>=/=)", {OpROTR, OpNE, OpRShiftSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 113, R"(++||=&&...)", {OpInc, OpLogicOrSet, OpLogicAnd, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 114, R"(-&--/=)", {OpMinus, OpBitAnd, OpDec, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 115, R"(<<=-=++^^)", {OpLShiftSet, OpMinusSet, OpInc, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 116, R"(>^=&==)", {OpGT, OpBitXorSet, OpBitAndSet, OpSet, Token()});
TEST_CASE(Operator, Permute, 117, R"(-!&...)", {OpMinus, OpLogicNot, OpBitAnd, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 118, R"(^^...|<<<=)", {OpLogicXor, OpEllipsis, OpBitOr, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 119, R"(<>..&&)", {OpLT, OpGT, OpRange, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 120, R"(!=>>>=>>>=>)", {OpNE, OpROTRSet, OpROTR, OpArrow, Token()});
TEST_CASE(Operator, Permute, 121, R"(&&<<^=>>=)", {OpLogicAnd, OpLShift, OpBitXorSet, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 122, R"(||&&||==>)", {OpLogicOr, OpLogicAnd, OpLogicOrSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 123, R"(+>>>&|)", {OpPlus, OpROTR, OpBitAnd, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 124, R"(!=>..||)", {OpLogicNot, OpArrow, OpRange, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 125, R"(||=>>>?)", {OpLogicOrSet, OpRShift, OpGT, OpTernary, Token()});
TEST_CASE(Operator, Permute, 126, R"(&=>>-=>)", {OpBitAndSet, OpRShift, OpMinus, OpArrow, Token()});
TEST_CASE(Operator, Permute, 127, R"(||=^^>=<<)", {OpLogicOrSet, OpLogicXor, OpGE, OpLShift, Token()});
TEST_CASE(Operator, Permute, 128, R"(++<<<=>?)", {OpInc, OpROTLSet, OpGT, OpTernary, Token()});
TEST_CASE(Operator, Permute, 129, R"(=&..%)", {OpSet, OpBitAnd, OpRange, OpPercent, Token()});
TEST_CASE(Operator, Permute, 130, R"(<<^^--*)", {OpLShift, OpLogicXor, OpDec, OpTimes, Token()});
TEST_CASE(Operator, Permute, 131, R"(~...>>>=>)", {OpBitNot, OpEllipsis, OpROTR, OpArrow, Token()});
TEST_CASE(Operator, Permute, 132, R"(==<<<=|++)", {OpEq, OpROTLSet, OpBitOr, OpInc, Token()});
TEST_CASE(Operator, Permute, 133, R"(>>>=>>=!/)", {OpROTRSet, OpRShiftSet, OpLogicNot, OpSlash, Token()});
TEST_CASE(Operator, Permute, 134, R"(&&=|||=%=)", {OpLogicAndSet, OpBitOr, OpLogicOrSet, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 135, R"(+=*=^|)", {OpPlusSet, OpTimesSet, OpBitXor, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 136, R"(>>>=<<>>>!)", {OpROTRSet, OpLShift, OpROTR, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 137, R"(..--<!=)", {OpRange, OpDec, OpLT, OpNE, Token()});
TEST_CASE(Operator, Permute, 138, R"(||->=--)", {OpLogicOr, OpMinus, OpGE, OpDec, Token()});
TEST_CASE(Operator, Permute, 139, R"(|=*=^===)", {OpBitOrSet, OpTimesSet, OpBitXorSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 140, R"(+~<<<>=)", {OpPlus, OpBitNot, OpROTL, OpGE, Token()});
TEST_CASE(Operator, Permute, 141, R"(<<<>>=^^=-)", {OpROTL, OpRShiftSet, OpLogicXorSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 142, R"(%=^^=...>>)", {OpPercentSet, OpLogicXorSet, OpEllipsis, OpRShift, Token()});
TEST_CASE(Operator, Permute, 143, R"(%>>>^=|=)", {OpPercent, OpROTR, OpBitXorSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 144, R"(++||=||*)", {OpInc, OpLogicOrSet, OpLogicOr, OpTimes, Token()});
TEST_CASE(Operator, Permute, 145, R"(&&|=>>>^)", {OpLogicAnd, OpBitOrSet, OpROTR, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 146, R"(...++%=~)", {OpEllipsis, OpInc, OpPercentSet, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 147, R"(||=>==>>=)", {OpLogicOrSet, OpGE, OpSet, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 148, R"(~<=>>>=)", {OpBitNot, OpLE, OpROTR, OpSet, Token()});
TEST_CASE(Operator, Permute, 149, R"(-<<<=&<<=)", {OpMinus, OpROTLSet, OpBitAnd, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 150, R"(-!=%=)", {OpMinus, OpLogicNot, OpSet, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 151, R"(<<<=>==>)", {OpROTLSet, OpGE, OpSet, OpGT, Token()});
TEST_CASE(Operator, Permute, 152, R"(^<=^^=...)", {OpBitXor, OpLE, OpLogicXorSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 153, R"(^<~&&=)", {OpBitXor, OpLT, OpBitNot, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 154, R"(&&=?~/=)", {OpLogicAndSet, OpTernary, OpBitNot, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 155, R"(%=>>!=>)", {OpPercentSet, OpRShift, OpLogicNot, OpArrow, Token()});
TEST_CASE(Operator, Permute, 156, R"(<<==>=>>>)", {OpLShiftSet, OpArrow, OpSet, OpROTR, Token()});
TEST_CASE(Operator, Permute, 157, R"(<<<=&>>>=/)", {OpROTLSet, OpBitAnd, OpROTRSet, OpSlash, Token()});
TEST_CASE(Operator, Permute, 158, R"(=>/=*=>=)", {OpArrow, OpSlashSet, OpTimesSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 159, R"(||?.&)", {OpLogicOr, OpTernary, OpDot, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 160, R"(<<<=~...%)", {OpROTLSet, OpBitNot, OpEllipsis, OpPercent, Token()});
TEST_CASE(Operator, Permute, 161, R"(>>=>%<<<)", {OpRShiftSet, OpGT, OpPercent, OpROTL, Token()});
TEST_CASE(Operator, Permute, 162, R"(>...+=-)", {OpGT, OpEllipsis, OpPlusSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 163, R"(%=++<*=)", {OpPercentSet, OpInc, OpLT, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 164, R"(/>=>>===)", {OpSlash, OpGE, OpRShiftSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 165, R"(&&/|=?)", {OpLogicAnd, OpSlash, OpBitOrSet, OpTernary, Token()});
TEST_CASE(Operator, Permute, 166, R"(>>>^^-=>)", {OpROTR, OpLogicXor, OpMinus, OpArrow, Token()});
TEST_CASE(Operator, Permute, 167, R"(-=<<=+=%=)", {OpMinusSet, OpLShiftSet, OpPlusSet, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 168, R"(<||!==)", {OpLT, OpLogicOr, OpLogicNot, OpEq, Token()});
TEST_CASE(Operator, Permute, 169, R"(>>=^=++*=)", {OpRShiftSet, OpBitXorSet, OpInc, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 170, R"(*=<<=++...)", {OpTimesSet, OpLShiftSet, OpInc, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 171, R"(<=><<<=!=)", {OpLE, OpGT, OpROTLSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 172, R"(^^=||=-->>>)", {OpLogicXorSet, OpLogicOrSet, OpDec, OpROTR, Token()});
TEST_CASE(Operator, Permute, 173, R"(...*+=<<=)", {OpEllipsis, OpTimes, OpPlusSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 174, R"(>>>=>>==^^=)", {OpROTRSet, OpRShift, OpEq, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 175, R"(<<=&&^^=?)", {OpLShiftSet, OpLogicAnd, OpLogicXorSet, OpTernary, Token()});
TEST_CASE(Operator, Permute, 176, R"(*/=%)", {OpTimes, OpSlash, OpSet, OpPercent, Token()});
TEST_CASE(Operator, Permute, 177, R"(&&+=^^~)", {OpLogicAnd, OpPlusSet, OpLogicXor, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 178, R"(--=<=/)", {OpDec, OpSet, OpLE, OpSlash, Token()});
TEST_CASE(Operator, Permute, 179, R"(<<--&&%=)", {OpLShift, OpDec, OpLogicAnd, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 180, R"(*?^^=>>>=)", {OpTimes, OpTernary, OpLogicXorSet, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 181, R"(^^=*=*||=)", {OpLogicXorSet, OpTimesSet, OpTimes, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 182, R"(=>|*-=)", {OpArrow, OpBitOr, OpTimes, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 183, R"(+!=...^^=)", {OpPlus, OpNE, OpEllipsis, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 184, R"(!=>=++<)", {OpNE, OpGE, OpInc, OpLT, Token()});
TEST_CASE(Operator, Permute, 185, R"(|<<<=&&==>)", {OpBitOr, OpROTLSet, OpLogicAndSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 186, R"(^^=>>>./=)", {OpLogicXorSet, OpROTR, OpDot, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 187, R"(..<=/-)", {OpRange, OpLE, OpSlash, OpMinus, Token()});
TEST_CASE(Operator, Permute, 188, R"(+=&=<)", {OpPlusSet, OpBitAnd, OpSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 189, R"(<<%=~|)", {OpLShift, OpPercentSet, OpBitNot, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 190, R"(<<=&&=.*=)", {OpLShiftSet, OpLogicAndSet, OpDot, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 191, R"(!/>><)", {OpLogicNot, OpSlash, OpRShift, OpLT, Token()});
TEST_CASE(Operator, Permute, 192, R"(^>>>>>...)", {OpBitXor, OpROTR, OpRShift, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 193, R"(--|=%%=)", {OpDec, OpBitOrSet, OpPercent, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 194, R"(^=..>>=>>>)", {OpBitXorSet, OpRange, OpRShiftSet, OpROTR, Token()});
TEST_CASE(Operator, Permute, 195, R"(%=.!=+=)", {OpPercentSet, OpDot, OpNE, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 196, R"(<<<=&&===>=)", {OpROTLSet, OpLogicAndSet, OpEq, OpGE, Token()});
TEST_CASE(Operator, Permute, 197, R"(-=<<<=<<=)", {OpMinusSet, OpROTL, OpSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 198, R"(*>>?<)", {OpTimes, OpRShift, OpTernary, OpLT, Token()});
TEST_CASE(Operator, Permute, 199, R"(>>>|!=<<<)", {OpROTR, OpBitOr, OpNE, OpROTL, Token()});
TEST_CASE(Operator, Permute, 200, R"(<<=^=/=||)", {OpLShiftSet, OpBitXorSet, OpSlashSet, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 201, R"(*^=>>!=)", {OpTimes, OpBitXorSet, OpRShift, OpNE, Token()});
TEST_CASE(Operator, Permute, 202, R"(+=%=>>>>)", {OpPlusSet, OpPercentSet, OpROTR, OpGT, Token()});
TEST_CASE(Operator, Permute, 203, R"(+=%<<<=/)", {OpPlusSet, OpPercent, OpROTLSet, OpSlash, Token()});
TEST_CASE(Operator, Permute, 204, R"(&=<<^^=|=)", {OpBitAndSet, OpLShift, OpLogicXorSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 205, R"(%=...*>=)", {OpPercentSet, OpEllipsis, OpTimes, OpGE, Token()});
TEST_CASE(Operator, Permute, 206, R"(+=<=..=)", {OpPlusSet, OpLE, OpRange, OpSet, Token()});
TEST_CASE(Operator, Permute, 207, R"(..?|&&)", {OpRange, OpTernary, OpBitOr, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 208, R"(>>>=...?>)", {OpROTRSet, OpEllipsis, OpTernary, OpGT, Token()});
TEST_CASE(Operator, Permute, 209, R"(...>-<<<)", {OpEllipsis, OpGT, OpMinus, OpROTL, Token()});
TEST_CASE(Operator, Permute, 210, R"(<<<=||+!=)", {OpROTLSet, OpLogicOr, OpPlus, OpNE, Token()});
TEST_CASE(Operator, Permute, 211, R"(>>><<<&=*=)", {OpROTR, OpROTL, OpBitAndSet, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 212, R"(++|=...)", {OpInc, OpBitOrSet, OpDot, OpRange, Token()});
TEST_CASE(Operator, Permute, 213, R"(...^*>)", {OpEllipsis, OpBitXor, OpTimes, OpGT, Token()});
TEST_CASE(Operator, Permute, 214, R"(%==.*)", {OpPercentSet, OpSet, OpDot, OpTimes, Token()});
TEST_CASE(Operator, Permute, 215, R"(^^/=<<<!)", {OpLogicXor, OpSlashSet, OpROTL, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 216, R"(?<&=^)", {OpTernary, OpLT, OpBitAndSet, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 217, R"(>>>=&&=!=&&)", {OpROTRSet, OpLogicAndSet, OpNE, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 218, R"(>>=^>>+=)", {OpRShiftSet, OpBitXor, OpRShift, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 219, R"(>>>=^=<<<===)", {OpROTRSet, OpBitXorSet, OpROTLSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 220, R"(*=...>=>)", {OpTimesSet, OpEllipsis, OpGT, OpArrow, Token()});
TEST_CASE(Operator, Permute, 221, R"(+=-=...==)", {OpPlusSet, OpMinusSet, OpEllipsis, OpEq, Token()});
TEST_CASE(Operator, Permute, 222, R"(=>^^!=/=)", {OpArrow, OpLogicXor, OpNE, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 223, R"(|--===)", {OpBitOr, OpDec, OpEq, OpSet, Token()});
TEST_CASE(Operator, Permute, 224, R"(~^^=<=&)", {OpBitNot, OpLogicXorSet, OpLE, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 225, R"(<<<|..?)", {OpROTL, OpBitOr, OpRange, OpTernary, Token()});
TEST_CASE(Operator, Permute, 226, R"(|<=<<>=)", {OpBitOr, OpLE, OpLShift, OpGE, Token()});
TEST_CASE(Operator, Permute, 227, R"(/^^&===)", {OpSlash, OpLogicXor, OpBitAndSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 228, R"(&/=^^=<=)", {OpBitAnd, OpSlashSet, OpLogicXorSet, OpLE, Token()});
TEST_CASE(Operator, Permute, 229, R"(...<<--&&)", {OpEllipsis, OpLShift, OpDec, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 230, R"(||=<<<=>>==>)", {OpLogicOrSet, OpROTLSet, OpRShiftSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 231, R"(-^*=<)", {OpMinus, OpBitXor, OpTimesSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 232, R"(%...^^=.)", {OpPercent, OpEllipsis, OpLogicXorSet, OpDot, Token()});
TEST_CASE(Operator, Permute, 233, R"(&=||=/=)", {OpBitAndSet, OpLogicOrSet, OpSlash, OpSet, Token()});
TEST_CASE(Operator, Permute, 234, R"(>=^<=<<<)", {OpGE, OpBitXor, OpLE, OpROTL, Token()});
TEST_CASE(Operator, Permute, 235, R"(&&^^=&&=%=)", {OpLogicAnd, OpLogicXorSet, OpLogicAndSet, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 236, R"(<<</=-%)", {OpROTL, OpSlashSet, OpMinus, OpPercent, Token()});
TEST_CASE(Operator, Permute, 237, R"(&&<<=++!)", {OpLogicAnd, OpLShiftSet, OpInc, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 238, R"(&&-=/=>=)", {OpLogicAnd, OpMinusSet, OpSlashSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 239, R"(^>>>-->>=)", {OpBitXor, OpROTR, OpDec, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 240, R"(>%<-=)", {OpGT, OpPercent, OpLT, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 241, R"(||...>>^=)", {OpLogicOr, OpEllipsis, OpRShift, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 242, R"(++!=&&=--)", {OpInc, OpNE, OpLogicAndSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 243, R"(>>>==&&||=)", {OpROTR, OpEq, OpLogicAnd, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 244, R"(<<=&=.>>=)", {OpLShiftSet, OpBitAndSet, OpDot, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 245, R"(==&/*)", {OpEq, OpBitAnd, OpSlash, OpTimes, Token()});
TEST_CASE(Operator, Permute, 246, R"(+--^^=*)", {OpPlus, OpDec, OpLogicXorSet, OpTimes, Token()});
TEST_CASE(Operator, Permute, 247, R"(!...>>>=--)", {OpLogicNot, OpEllipsis, OpROTRSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 248, R"(||=>>>=>><=)", {OpLogicOrSet, OpROTRSet, OpRShift, OpLE, Token()});
TEST_CASE(Operator, Permute, 249, R"(==--*+)", {OpEq, OpDec, OpTimes, OpPlus, Token()});
TEST_CASE(Operator, Permute, 250, R"(>=--%<<<=)", {OpGE, OpDec, OpPercent, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 251, R"(~+=||=<<<)", {OpBitNot, OpPlusSet, OpLogicOrSet, OpROTL, Token()});
TEST_CASE(Operator, Permute, 252, R"(-!...<<=)", {OpMinus, OpLogicNot, OpEllipsis, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 253, R"(-->*=&)", {OpDec, OpGT, OpTimesSet, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 254, R"(||=<<=>>>==)", {OpLogicOrSet, OpLShiftSet, OpROTR, OpEq, Token()});
TEST_CASE(Operator, Permute, 255, R"(=/>>>>>>=)", {OpSet, OpSlash, OpROTR, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 256, R"(||<=<<<--)", {OpLogicOr, OpLE, OpROTL, OpDec, Token()});
TEST_CASE(Operator, Permute, 257, R"(--=>=>>>)", {OpDec, OpSet, OpGE, OpROTR, Token()});
TEST_CASE(Operator, Permute, 258, R"(<-&--)", {OpLT, OpMinus, OpBitAnd, OpDec, Token()});
TEST_CASE(Operator, Permute, 259, R"(|=*<<=|)", {OpBitOrSet, OpTimes, OpLShiftSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 260, R"(>>-<<<^=)", {OpRShift, OpMinus, OpROTL, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 261, R"(>>=%=<<<=+)", {OpRShiftSet, OpPercentSet, OpROTLSet, OpPlus, Token()});
TEST_CASE(Operator, Permute, 262, R"(%~/=*)", {OpPercent, OpBitNot, OpSlashSet, OpTimes, Token()});
TEST_CASE(Operator, Permute, 263, R"(*><<<<)", {OpTimes, OpGT, OpROTL, OpLT, Token()});
TEST_CASE(Operator, Permute, 264, R"(^=...+*=)", {OpBitXorSet, OpEllipsis, OpPlus, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 265, R"(|<<<<||)", {OpBitOr, OpLT, OpROTL, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 266, R"(*===&<<<=)", {OpTimesSet, OpEq, OpBitAnd, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 267, R"(<=||^--)", {OpLE, OpLogicOr, OpBitXor, OpDec, Token()});
TEST_CASE(Operator, Permute, 268, R"(^=>=>>>==>)", {OpBitXorSet, OpGE, OpROTRSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 269, R"(||=*=^^<<=)", {OpLogicOrSet, OpTimesSet, OpLogicXor, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 270, R"(^..&&%=)", {OpBitXor, OpRange, OpLogicAnd, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 271, R"(>>>====>>=)", {OpROTRSet, OpEq, OpSet, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 272, R"(/&&=+=/=)", {OpSlash, OpLogicAndSet, OpPlusSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 273, R"(^=/&&--)", {OpBitXorSet, OpSlash, OpLogicAnd, OpDec, Token()});
TEST_CASE(Operator, Permute, 274, R"(>~&&<<=)", {OpGT, OpBitNot, OpLogicAnd, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 275, R"(==<<<<<=...)", {OpEq, OpLShift, OpROTLSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 276, R"(*!=%=*=)", {OpTimes, OpNE, OpPercentSet, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 277, R"(%=^=<<<=>)", {OpPercentSet, OpBitXorSet, OpROTL, OpArrow, Token()});
TEST_CASE(Operator, Permute, 278, R"(>>&=<~)", {OpRShift, OpBitAndSet, OpLT, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 279, R"(<<=!||=/=)", {OpLShiftSet, OpLogicNot, OpLogicOrSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 280, R"(+=>=>>>||)", {OpPlusSet, OpGE, OpROTR, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 281, R"(...<=<<&=)", {OpEllipsis, OpLE, OpLShift, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 282, R"(+&&|=!=)", {OpPlus, OpLogicAnd, OpBitOrSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 283, R"(&&>><~)", {OpLogicAnd, OpRShift, OpLT, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 284, R"(>>>^=|=&=)", {OpROTR, OpBitXorSet, OpBitOrSet, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 285, R"(++>>>=|/)", {OpInc, OpROTRSet, OpBitOr, OpSlash, Token()});
TEST_CASE(Operator, Permute, 286, R"(<<<<-<<<=)", {OpLT, OpROTL, OpMinus, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 287, R"(^=^^=&&<<<)", {OpBitXorSet, OpLogicXorSet, OpLogicAnd, OpROTL, Token()});
TEST_CASE(Operator, Permute, 288, R"(<<=<<<%=+)", {OpLShiftSet, OpROTL, OpPercentSet, OpPlus, Token()});
TEST_CASE(Operator, Permute, 289, R"(^^<</++)", {OpLogicXor, OpLShift, OpSlash, OpInc, Token()});
TEST_CASE(Operator, Permute, 290, R"(<<<^&*)", {OpROTL, OpBitXor, OpBitAnd, OpTimes, Token()});
TEST_CASE(Operator, Permute, 291, R"(&&=^&=%)", {OpLogicAndSet, OpBitXor, OpBitAndSet, OpPercent, Token()});
TEST_CASE(Operator, Permute, 292, R"(-+=/++)", {OpMinus, OpPlusSet, OpSlash, OpInc, Token()});
TEST_CASE(Operator, Permute, 293, R"(..&=<<%=)", {OpRange, OpBitAndSet, OpLShift, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 294, R"(^<<<=>>=)", {OpBitXor, OpLShift, OpLE, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 295, R"(.<>>>=%)", {OpDot, OpLT, OpROTRSet, OpPercent, Token()});
TEST_CASE(Operator, Permute, 296, R"(!=<<=...*)", {OpNE, OpLShiftSet, OpEllipsis, OpTimes, Token()});
TEST_CASE(Operator, Permute, 297, R"(===>>=--)", {OpSet, OpEq, OpRShiftSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 298, R"(^^=<=>>>=!=)", {OpLogicXorSet, OpLE, OpROTRSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 299, R"(<=<<<||=<)", {OpLE, OpROTL, OpLogicOrSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 300, R"(++&&=-=+=)", {OpInc, OpLogicAndSet, OpMinusSet, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 301, R"(^=>!=|)", {OpBitXorSet, OpGT, OpNE, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 302, R"(/=^^=&|=)", {OpSlashSet, OpLogicXorSet, OpBitAnd, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 303, R"(<<<<<<<=/=)", {OpLT, OpROTL, OpROTLSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 304, R"(>&&^^>>>)", {OpGT, OpLogicAnd, OpLogicXor, OpROTR, Token()});
TEST_CASE(Operator, Permute, 305, R"(?||=-=|=)", {OpTernary, OpLogicOrSet, OpMinusSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 306, R"(.+<<=^^=)", {OpDot, OpPlus, OpLShiftSet, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 307, R"(++!=%=|=)", {OpInc, OpNE, OpPercentSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 308, R"(--<<<=|)", {OpDec, OpLShift, OpLE, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 309, R"(^^>>=&&=^=)", {OpLogicXor, OpRShiftSet, OpLogicAndSet, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 310, R"(</=..%)", {OpLT, OpSlashSet, OpRange, OpPercent, Token()});
TEST_CASE(Operator, Permute, 311, R"(==!=^=>)", {OpEq, OpNE, OpBitXor, OpArrow, Token()});
TEST_CASE(Operator, Permute, 312, R"(&&=|&&?)", {OpLogicAndSet, OpBitOr, OpLogicAnd, OpTernary, Token()});
TEST_CASE(Operator, Permute, 313, R"(|=*=!=)", {OpBitOrSet, OpTimesSet, OpLogicNot, OpSet, Token()});
TEST_CASE(Operator, Permute, 314, R"(>>>=<=~!)", {OpROTRSet, OpLE, OpBitNot, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 315, R"(|&&/==>)", {OpBitOr, OpLogicAnd, OpSlashSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 316, R"(&=<=||=^)", {OpBitAndSet, OpLE, OpLogicOrSet, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 317, R"(=>>=%=!=)", {OpArrow, OpGE, OpPercentSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 318, R"(!=<<<=>-=)", {OpNE, OpROTLSet, OpGT, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 319, R"(--*==|)", {OpDec, OpTimes, OpEq, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 320, R"(*|-=^=)", {OpTimes, OpBitOr, OpMinusSet, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 321, R"(~=<<<=%=)", {OpBitNot, OpSet, OpROTLSet, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 322, R"(+>>>=-=?)", {OpPlus, OpROTRSet, OpMinusSet, OpTernary, Token()});
TEST_CASE(Operator, Permute, 323, R"(^^=|?/)", {OpLogicXorSet, OpBitOr, OpTernary, OpSlash, Token()});
TEST_CASE(Operator, Permute, 324, R"(!<<=*=%=)", {OpLogicNot, OpLShiftSet, OpTimesSet, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 325, R"(../^^=>=)", {OpRange, OpSlash, OpLogicXorSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 326, R"(?->>>^^=)", {OpTernary, OpMinus, OpROTR, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 327, R"(>=&&=%=--)", {OpGE, OpLogicAndSet, OpPercentSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 328, R"(||=%><<)", {OpLogicOrSet, OpPercent, OpGT, OpLShift, Token()});
TEST_CASE(Operator, Permute, 329, R"(>>>=<<<=<<|=)", {OpROTRSet, OpROTLSet, OpLShift, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 330, R"(<<<<=|%)", {OpLShift, OpLShiftSet, OpBitOr, OpPercent, Token()});
TEST_CASE(Operator, Permute, 331, R"(*=...<===)", {OpTimesSet, OpEllipsis, OpLE, OpEq, Token()});
TEST_CASE(Operator, Permute, 332, R"(-&&!=++)", {OpMinus, OpLogicAnd, OpNE, OpInc, Token()});
TEST_CASE(Operator, Permute, 333, R"(!=||+)", {OpLogicNot, OpSet, OpLogicOr, OpPlus, Token()});
TEST_CASE(Operator, Permute, 334, R"(^^=||%=<)", {OpLogicXorSet, OpLogicOr, OpPercentSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 335, R"(?%>>=/=)", {OpTernary, OpPercent, OpRShiftSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 336, R"(||=/+=++)", {OpLogicOrSet, OpSlash, OpPlusSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 337, R"(>>>+==%)", {OpROTR, OpPlusSet, OpSet, OpPercent, Token()});
TEST_CASE(Operator, Permute, 338, R"(<<=*=^-=)", {OpLShiftSet, OpTimesSet, OpBitXor, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 339, R"(<<<>>>=^^=>>)", {OpROTL, OpROTRSet, OpLogicXorSet, OpRShift, Token()});
TEST_CASE(Operator, Permute, 340, R"(!^^>>=...)", {OpLogicNot, OpLogicXor, OpRShiftSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 341, R"(>!=^^=<<<=)", {OpGT, OpNE, OpLogicXorSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 342, R"(=>++=!)", {OpArrow, OpInc, OpSet, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 343, R"(>>&&=<<=<)", {OpRShift, OpLogicAndSet, OpLShiftSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 344, R"(..-->>===)", {OpRange, OpDec, OpRShiftSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 345, R"(<</..>>>=)", {OpLShift, OpSlash, OpRange, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 346, R"(==&&=>=.)", {OpEq, OpLogicAndSet, OpGE, OpDot, Token()});
TEST_CASE(Operator, Permute, 347, R"(=>>>=<==>)", {OpSet, OpROTRSet, OpLE, OpArrow, Token()});
TEST_CASE(Operator, Permute, 348, R"(-=/==>~)", {OpMinusSet, OpSlashSet, OpArrow, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 349, R"(^^=&*..)", {OpLogicXorSet, OpBitAnd, OpTimes, OpRange, Token()});
TEST_CASE(Operator, Permute, 350, R"(=>>=&=^=)", {OpArrow, OpGE, OpBitAndSet, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 351, R"(<<<=&^^=++)", {OpROTLSet, OpBitAnd, OpLogicXorSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 352, R"(%-=<<<<=)", {OpPercent, OpMinusSet, OpLShift, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 353, R"(&&^=<++)", {OpLogicAnd, OpBitXorSet, OpLT, OpInc, Token()});
TEST_CASE(Operator, Permute, 354, R"(^%=+=~)", {OpBitXor, OpPercentSet, OpPlusSet, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 355, R"(=..>>><<<=)", {OpSet, OpRange, OpROTR, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 356, R"(!<<=^?)", {OpLogicNot, OpLShiftSet, OpBitXor, OpTernary, Token()});
TEST_CASE(Operator, Permute, 357, R"(<<..<<=<)", {OpLShift, OpRange, OpLShiftSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 358, R"(>=^%||)", {OpGE, OpBitXor, OpPercent, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 359, R"(^^=>>>-===)", {OpLogicXorSet, OpROTR, OpMinusSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 360, R"(>>>=|=&<<<=)", {OpROTRSet, OpBitOrSet, OpBitAnd, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 361, R"(&..%=&&=)", {OpBitAnd, OpRange, OpPercentSet, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 362, R"(>||..^^)", {OpGT, OpLogicOr, OpRange, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 363, R"(!./|)", {OpLogicNot, OpDot, OpSlash, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 364, R"(..<<=+=/)", {OpRange, OpLShiftSet, OpPlusSet, OpSlash, Token()});
TEST_CASE(Operator, Permute, 365, R"(!=<<<=>)", {OpLogicNot, OpSet, OpROTLSet, OpGT, Token()});
TEST_CASE(Operator, Permute, 366, R"(+-=++>>>)", {OpPlus, OpMinusSet, OpInc, OpROTR, Token()});
TEST_CASE(Operator, Permute, 367, R"(>=...^..)", {OpGE, OpEllipsis, OpBitXor, OpRange, Token()});
TEST_CASE(Operator, Permute, 368, R"(==<>>=)", {OpEq, OpLT, OpGT, OpGE, Token()});
TEST_CASE(Operator, Permute, 369, R"(*=..>>>%=)", {OpTimesSet, OpRange, OpROTR, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 370, R"(-=|*||=)", {OpMinusSet, OpBitOr, OpTimes, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 371, R"(?>>>==..)", {OpTernary, OpROTRSet, OpSet, OpRange, Token()});
TEST_CASE(Operator, Permute, 372, R"(||=!^^=^^)", {OpLogicOrSet, OpLogicNot, OpLogicXorSet, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 373, R"(>>=?!||)", {OpRShiftSet, OpTernary, OpLogicNot, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 374, R"(..^%&=)", {OpRange, OpBitXor, OpPercent, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 375, R"(-&+=<<=)", {OpMinus, OpBitAnd, OpPlusSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 376, R"(&&=>>>||=>)", {OpLogicAndSet, OpROTR, OpLogicOr, OpArrow, Token()});
TEST_CASE(Operator, Permute, 377, R"(^^=<<<=&>)", {OpLogicXorSet, OpROTLSet, OpBitAnd, OpGT, Token()});
TEST_CASE(Operator, Permute, 378, R"(<<<=&=.)", {OpROTLSet, OpBitAnd, OpSet, OpDot, Token()});
TEST_CASE(Operator, Permute, 379, R"(~.<<<||=)", {OpBitNot, OpDot, OpROTL, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 380, R"(==..|=/=)", {OpEq, OpRange, OpBitOrSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 381, R"(<<<=/!=+)", {OpROTLSet, OpSlash, OpNE, OpPlus, Token()});
TEST_CASE(Operator, Permute, 382, R"(.-=*=!)", {OpDot, OpMinusSet, OpTimesSet, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 383, R"(+=..~&&=)", {OpPlusSet, OpRange, OpBitNot, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 384, R"(-%&&=!=)", {OpMinus, OpPercent, OpLogicAndSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 385, R"(!--++>>>)", {OpLogicNot, OpDec, OpInc, OpROTR, Token()});
TEST_CASE(Operator, Permute, 386, R"(-=...<=|=)", {OpMinusSet, OpEllipsis, OpLE, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 387, R"(..>=?&&)", {OpRange, OpGE, OpTernary, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 388, R"(&..^=<)", {OpBitAnd, OpRange, OpBitXorSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 389, R"(.-||&&=)", {OpDot, OpMinus, OpLogicOr, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 390, R"(--%>>==)", {OpDec, OpPercent, OpRShift, OpEq, Token()});
TEST_CASE(Operator, Permute, 391, R"(++.>>?)", {OpInc, OpDot, OpRShift, OpTernary, Token()});
TEST_CASE(Operator, Permute, 392, R"(+/>>+=)", {OpPlus, OpSlash, OpRShift, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 393, R"(.*=&=)", {OpDot, OpTimesSet, OpBitAnd, OpSet, Token()});
TEST_CASE(Operator, Permute, 394, R"(|!==<)", {OpBitOr, OpLogicNot, OpEq, OpLT, Token()});
TEST_CASE(Operator, Permute, 395, R"(!=^<<<=-)", {OpNE, OpBitXor, OpROTLSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 396, R"(=<=<<==>)", {OpSet, OpLE, OpLShiftSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 397, R"(|/*>>>=)", {OpBitOr, OpSlash, OpTimes, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 398, R"(>>>=..-=?)", {OpROTRSet, OpRange, OpMinusSet, OpTernary, Token()});
TEST_CASE(Operator, Permute, 399, R"(^^=%==>--)", {OpLogicXorSet, OpPercentSet, OpArrow, OpDec, Token()});
TEST_CASE(Operator, Permute, 400, R"(++<...<<<)", {OpInc, OpLT, OpEllipsis, OpROTL, Token()});
TEST_CASE(Operator, Permute, 401, R"(^^=..&&-)", {OpLogicXorSet, OpRange, OpLogicAnd, OpMinus, Token()});
TEST_CASE(Operator, Permute, 402, R"(|=<<<=-<=)", {OpBitOrSet, OpROTLSet, OpMinus, OpLE, Token()});
TEST_CASE(Operator, Permute, 403, R"(&=<<!=...)", {OpBitAndSet, OpLShift, OpNE, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 404, R"(%=>!&)", {OpPercent, OpArrow, OpLogicNot, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 405, R"(>>>--=>%)", {OpROTR, OpDec, OpArrow, OpPercent, Token()});
TEST_CASE(Operator, Permute, 406, R"(<<||=|%=)", {OpLShift, OpLogicOrSet, OpBitOr, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 407, R"(&*~>>=)", {OpBitAnd, OpTimes, OpBitNot, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 408, R"(+++?!)", {OpPlus, OpInc, OpTernary, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 409, R"(/==>>=...)", {OpSlashSet, OpArrow, OpGE, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 410, R"(-=<<*>>)", {OpMinusSet, OpLShift, OpTimes, OpRShift, Token()});
TEST_CASE(Operator, Permute, 411, R"(<=+*=<<<=)", {OpLE, OpPlus, OpTimesSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 412, R"(/=-.<<<)", {OpSlashSet, OpMinus, OpDot, OpROTL, Token()});
TEST_CASE(Operator, Permute, 413, R"(*/=>=--)", {OpTimes, OpSlashSet, OpGE, OpDec, Token()});
TEST_CASE(Operator, Permute, 414, R"(%/=-<=)", {OpPercent, OpSlashSet, OpMinus, OpLE, Token()});
TEST_CASE(Operator, Permute, 415, R"(|=^^=-->=)", {OpBitOrSet, OpLogicXorSet, OpDec, OpGE, Token()});
TEST_CASE(Operator, Permute, 416, R"(%<<=^^*=)", {OpPercent, OpLShiftSet, OpLogicXor, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 417, R"(...++<<=-=)", {OpEllipsis, OpInc, OpLShiftSet, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 418, R"(>>|~&&)", {OpRShift, OpBitOr, OpBitNot, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 419, R"(!=.>^=)", {OpNE, OpDot, OpGT, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 420, R"(<=*=>>>=)", {OpLE, OpTimesSet, OpGT, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 421, R"(*^=||&&=)", {OpTimes, OpBitXorSet, OpLogicOr, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 422, R"(||=--<<^=)", {OpLogicOrSet, OpDec, OpLShift, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 423, R"(><<<=^^-)", {OpGT, OpROTLSet, OpLogicXor, OpMinus, Token()});
TEST_CASE(Operator, Permute, 424, R"(<<<=?>&)", {OpROTLSet, OpTernary, OpGT, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 425, R"(>>===>*)", {OpRShiftSet, OpSet, OpArrow, OpTimes, Token()});
TEST_CASE(Operator, Permute, 426, R"(%=|=^=...)", {OpPercentSet, OpBitOrSet, OpBitXorSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 427, R"(>>=%&&/=)", {OpRShiftSet, OpPercent, OpLogicAnd, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 428, R"(/=<=>>>--)", {OpSlashSet, OpLE, OpROTR, OpDec, Token()});
TEST_CASE(Operator, Permute, 429, R"(!>>>=^^+)", {OpLogicNot, OpROTRSet, OpLogicXor, OpPlus, Token()});
TEST_CASE(Operator, Permute, 430, R"(^^=|<<<=>>)", {OpLogicXorSet, OpBitOr, OpROTLSet, OpRShift, Token()});
TEST_CASE(Operator, Permute, 431, R"(<<<=>^--)", {OpROTLSet, OpGT, OpBitXor, OpDec, Token()});
TEST_CASE(Operator, Permute, 432, R"(%/<<||=)", {OpPercent, OpSlash, OpLShift, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 433, R"(?.&=>>>=)", {OpTernary, OpDot, OpBitAndSet, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 434, R"(>=<<<>>=%)", {OpGE, OpROTL, OpRShiftSet, OpPercent, Token()});
TEST_CASE(Operator, Permute, 435, R"(>=+-==)", {OpGE, OpPlus, OpMinus, OpEq, Token()});
TEST_CASE(Operator, Permute, 436, R"(?&&=><=)", {OpTernary, OpLogicAndSet, OpGT, OpLE, Token()});
TEST_CASE(Operator, Permute, 437, R"(>=>%=!)", {OpGT, OpArrow, OpPercentSet, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 438, R"(&^...*=)", {OpBitAnd, OpBitXor, OpEllipsis, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 439, R"(>>>>>^=&&)", {OpRShift, OpROTR, OpBitXorSet, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 440, R"(....<<<||=)", {OpDot, OpEllipsis, OpROTL, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 441, R"(!=&=<<<%)", {OpNE, OpBitAndSet, OpROTL, OpPercent, Token()});
TEST_CASE(Operator, Permute, 442, R"(<&&=&=-)", {OpLT, OpLogicAndSet, OpBitAndSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 443, R"(&%==>*)", {OpBitAnd, OpPercentSet, OpArrow, OpTimes, Token()});
TEST_CASE(Operator, Permute, 444, R"(!!=^=&&=)", {OpLogicNot, OpNE, OpBitXorSet, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 445, R"(<-~>)", {OpLT, OpMinus, OpBitNot, OpGT, Token()});
TEST_CASE(Operator, Permute, 446, R"(&?<<=&&)", {OpBitAnd, OpTernary, OpLShiftSet, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 447, R"(+==>>>>=||=)", {OpPlusSet, OpArrow, OpROTRSet, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 448, R"(<&|=|)", {OpLT, OpBitAnd, OpBitOrSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 449, R"(<<^^^=+=)", {OpLShift, OpBitXor, OpLogicXorSet, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 450, R"(=>--<<=.)", {OpArrow, OpDec, OpLShiftSet, OpDot, Token()});
TEST_CASE(Operator, Permute, 451, R"(<<<!=>==)", {OpROTL, OpNE, OpGE, OpSet, Token()});
TEST_CASE(Operator, Permute, 452, R"(<<<=-+=||=)", {OpROTLSet, OpMinus, OpPlusSet, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 453, R"(~|=||=!)", {OpBitNot, OpBitOrSet, OpLogicOrSet, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 454, R"(--==>>>=%=)", {OpDec, OpEq, OpROTRSet, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 455, R"(/==>++<<=)", {OpSlashSet, OpArrow, OpInc, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 456, R"(..--&=>>)", {OpRange, OpDec, OpBitAndSet, OpRShift, Token()});
TEST_CASE(Operator, Permute, 457, R"(|..<=>=)", {OpBitOr, OpRange, OpLE, OpGE, Token()});
TEST_CASE(Operator, Permute, 458, R"(^^=--=!=)", {OpLogicXorSet, OpMinus, OpMinusSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 459, R"(>><<~&)", {OpRShift, OpLShift, OpBitNot, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 460, R"(...?<=<<<)", {OpEllipsis, OpTernary, OpLE, OpROTL, Token()});
TEST_CASE(Operator, Permute, 461, R"(?|=>==)", {OpTernary, OpBitOr, OpArrow, OpEq, Token()});
TEST_CASE(Operator, Permute, 462, R"(<<<=||=.>>=)", {OpROTLSet, OpLogicOrSet, OpDot, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 463, R"(^^=-<<<=++)", {OpLogicXorSet, OpMinus, OpROTLSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 464, R"(^^&&=!=|)", {OpLogicXor, OpLogicAndSet, OpNE, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 465, R"(+=*<-)", {OpPlusSet, OpTimes, OpLT, OpMinus, Token()});
TEST_CASE(Operator, Permute, 466, R"(*?>>=<<)", {OpTimes, OpTernary, OpRShiftSet, OpLShift, Token()});
TEST_CASE(Operator, Permute, 467, R"(^=>>=---=)", {OpBitXorSet, OpRShiftSet, OpDec, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 468, R"(<<<=||*=-)", {OpROTLSet, OpLogicOr, OpTimesSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 469, R"(-||=&&/=)", {OpMinus, OpLogicOrSet, OpLogicAnd, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 470, R"(&=>>=+=)", {OpBitAndSet, OpRShift, OpSet, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 471, R"(><<<=..==)", {OpGT, OpROTLSet, OpRange, OpEq, Token()});
TEST_CASE(Operator, Permute, 472, R"(>>^~||=)", {OpRShift, OpBitXor, OpBitNot, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 473, R"(>>==>^^^=)", {OpRShiftSet, OpArrow, OpBitXor, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 474, R"(||=>>=+>>)", {OpLogicOrSet, OpRShiftSet, OpPlus, OpRShift, Token()});
TEST_CASE(Operator, Permute, 475, R"(?<<<^^&)", {OpTernary, OpROTL, OpLogicXor, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 476, R"(!=%=&=^^=)", {OpNE, OpPercentSet, OpBitAndSet, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 477, R"(>>=*>>>||)", {OpRShiftSet, OpTimes, OpROTR, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 478, R"(++||||=+=)", {OpInc, OpLogicOr, OpLogicOrSet, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 479, R"(||&&=+=^=)", {OpLogicOr, OpLogicAndSet, OpPlusSet, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 480, R"(&&+=%~)", {OpLogicAnd, OpPlusSet, OpPercent, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 481, R"(&=>>=>=<)", {OpBitAndSet, OpRShiftSet, OpGE, OpLT, Token()});
TEST_CASE(Operator, Permute, 482, R"(=*=*>>>=)", {OpSet, OpTimesSet, OpTimes, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 483, R"(?=-|=)", {OpTernary, OpSet, OpMinus, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 484, R"(&&=%!<=)", {OpLogicAndSet, OpPercent, OpLogicNot, OpLE, Token()});
TEST_CASE(Operator, Permute, 485, R"(-=!*=>>>)", {OpMinusSet, OpLogicNot, OpTimesSet, OpROTR, Token()});
TEST_CASE(Operator, Permute, 486, R"(&&||/<)", {OpLogicAnd, OpLogicOr, OpSlash, OpLT, Token()});
TEST_CASE(Operator, Permute, 487, R"(=>..^^=/=)", {OpArrow, OpRange, OpLogicXorSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 488, R"(-=+=++=>)", {OpMinusSet, OpPlusSet, OpInc, OpArrow, Token()});
TEST_CASE(Operator, Permute, 489, R"(++=&>)", {OpInc, OpSet, OpBitAnd, OpGT, Token()});
TEST_CASE(Operator, Permute, 490, R"(=/=>>>=++)", {OpSet, OpSlashSet, OpROTRSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 491, R"(+=+=<=)", {OpPlus, OpSet, OpPlusSet, OpLE, Token()});
TEST_CASE(Operator, Permute, 492, R"(^^=+=<<...)", {OpLogicXorSet, OpPlusSet, OpLShift, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 493, R"(||==%=>)", {OpLogicOrSet, OpSet, OpPercent, OpArrow, Token()});
TEST_CASE(Operator, Permute, 494, R"(=>||--<<=)", {OpArrow, OpLogicOr, OpDec, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 495, R"(%^=*=<<<)", {OpPercent, OpBitXorSet, OpTimesSet, OpROTL, Token()});
TEST_CASE(Operator, Permute, 496, R"(^^*=...-)", {OpLogicXor, OpTimesSet, OpEllipsis, OpMinus, Token()});
TEST_CASE(Operator, Permute, 497, R"(><<<+===)", {OpGT, OpROTL, OpPlusSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 498, R"(..-=^^--)", {OpRange, OpMinusSet, OpLogicXor, OpDec, Token()});
TEST_CASE(Operator, Permute, 499, R"(&&=&<=..)", {OpLogicAndSet, OpBitAnd, OpLE, OpRange, Token()});
TEST_CASE(Operator, Permute, 500, R"(^=.<<=/)", {OpBitXorSet, OpDot, OpLShiftSet, OpSlash, Token()});
TEST_CASE(Operator, Permute, 501, R"(/=--<=*)", {OpSlashSet, OpDec, OpLE, OpTimes, Token()});
TEST_CASE(Operator, Permute, 502, R"(|-==>--)", {OpBitOr, OpMinusSet, OpArrow, OpDec, Token()});
TEST_CASE(Operator, Permute, 503, R"(.&&..<<<)", {OpDot, OpLogicAnd, OpRange, OpROTL, Token()});
TEST_CASE(Operator, Permute, 504, R"(||=>^^=^=)", {OpLogicOr, OpArrow, OpLogicXorSet, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 505, R"(>>>=~&&=>>>)", {OpROTRSet, OpBitNot, OpLogicAndSet, OpROTR, Token()});
TEST_CASE(Operator, Permute, 506, R"(...><<<=)", {OpEllipsis, OpGT, OpLShift, OpLE, Token()});
TEST_CASE(Operator, Permute, 507, R"(?<<=+>>>)", {OpTernary, OpLShiftSet, OpPlus, OpROTR, Token()});
TEST_CASE(Operator, Permute, 508, R"(&==<<<...)", {OpBitAndSet, OpSet, OpROTL, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 509, R"(&=&...*)", {OpBitAndSet, OpBitAnd, OpEllipsis, OpTimes, Token()});
TEST_CASE(Operator, Permute, 510, R"(>>=|%>)", {OpRShiftSet, OpBitOr, OpPercent, OpGT, Token()});
TEST_CASE(Operator, Permute, 511, R"(&=>^=-)", {OpBitAnd, OpArrow, OpBitXorSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 512, R"(||=|%+=)", {OpLogicOrSet, OpBitOr, OpPercent, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 513, R"(...&&=||>>>)", {OpEllipsis, OpLogicAndSet, OpLogicOr, OpROTR, Token()});
TEST_CASE(Operator, Permute, 514, R"(=>/=<|=)", {OpArrow, OpSlashSet, OpLT, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 515, R"(<=/>>>&)", {OpLE, OpSlash, OpROTR, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 516, R"(<<<&-==>)", {OpROTL, OpBitAnd, OpMinusSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 517, R"(.=>-^=)", {OpDot, OpArrow, OpMinus, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 518, R"(>>>=^=?-)", {OpROTRSet, OpBitXorSet, OpTernary, OpMinus, Token()});
TEST_CASE(Operator, Permute, 519, R"(>>=^=*+=)", {OpRShiftSet, OpBitXorSet, OpTimes, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 520, R"(^^^=<<=-=)", {OpBitXor, OpLogicXorSet, OpLShiftSet, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 521, R"(>>=^^..!=)", {OpRShiftSet, OpLogicXor, OpRange, OpNE, Token()});
TEST_CASE(Operator, Permute, 522, R"(!=^=<<<=*)", {OpNE, OpBitXorSet, OpROTLSet, OpTimes, Token()});
TEST_CASE(Operator, Permute, 523, R"(>>=^^!>>>)", {OpRShiftSet, OpLogicXor, OpLogicNot, OpROTR, Token()});
TEST_CASE(Operator, Permute, 524, R"(%&*=>>)", {OpPercent, OpBitAnd, OpTimesSet, OpRShift, Token()});
TEST_CASE(Operator, Permute, 525, R"(!=?>>--)", {OpNE, OpTernary, OpRShift, OpDec, Token()});
TEST_CASE(Operator, Permute, 526, R"(|=&&|+)", {OpBitOrSet, OpLogicAnd, OpBitOr, OpPlus, Token()});
TEST_CASE(Operator, Permute, 527, R"(<<=>>>!==)", {OpLShiftSet, OpROTR, OpNE, OpSet, Token()});
TEST_CASE(Operator, Permute, 528, R"(+=-->>>=-)", {OpPlusSet, OpDec, OpROTRSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 529, R"(~<>>=||)", {OpBitNot, OpLT, OpRShiftSet, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 530, R"(*%=-.)", {OpTimes, OpPercentSet, OpMinus, OpDot, Token()});
TEST_CASE(Operator, Permute, 531, R"(&<<=+=>>>)", {OpBitAnd, OpLShiftSet, OpPlusSet, OpROTR, Token()});
TEST_CASE(Operator, Permute, 532, R"(^<=...<<=)", {OpBitXor, OpLE, OpEllipsis, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 533, R"(>>>=>>>..+)", {OpROTRSet, OpROTR, OpRange, OpPlus, Token()});
TEST_CASE(Operator, Permute, 534, R"(%=||~>)", {OpPercentSet, OpLogicOr, OpBitNot, OpGT, Token()});
TEST_CASE(Operator, Permute, 535, R"(^&^^||=)", {OpBitXor, OpBitAnd, OpLogicXor, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 536, R"(++|=<=||)", {OpInc, OpBitOrSet, OpLE, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 537, R"(%><=&)", {OpPercent, OpGT, OpLE, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 538, R"(*/!..)", {OpTimes, OpSlash, OpLogicNot, OpRange, Token()});
TEST_CASE(Operator, Permute, 539, R"(+/=>>*=)", {OpPlus, OpSlashSet, OpRShift, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 540, R"(<<=>++..)", {OpLShift, OpArrow, OpInc, OpRange, Token()});
TEST_CASE(Operator, Permute, 541, R"(|%.>>=)", {OpBitOr, OpPercent, OpDot, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 542, R"(&=<<=<>>=)", {OpBitAndSet, OpLShiftSet, OpLT, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 543, R"(<<<<<%++)", {OpLShift, OpROTL, OpPercent, OpInc, Token()});
TEST_CASE(Operator, Permute, 544, R"(>>>===>>>>>=)", {OpROTRSet, OpEq, OpROTR, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 545, R"(<<<../=)", {OpROTL, OpRange, OpSlash, OpSet, Token()});
TEST_CASE(Operator, Permute, 546, R"(>|=%=&&)", {OpGT, OpBitOrSet, OpPercentSet, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 547, R"(|^=&&!=)", {OpBitOr, OpBitXorSet, OpLogicAnd, OpNE, Token()});
TEST_CASE(Operator, Permute, 548, R"(*=<<<||&)", {OpTimesSet, OpROTL, OpLogicOr, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 549, R"(+|=!=)", {OpPlus, OpBitOr, OpSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 550, R"(%*/==)", {OpPercent, OpTimes, OpSlash, OpEq, Token()});
TEST_CASE(Operator, Permute, 551, R"(|%-=&)", {OpBitOr, OpPercent, OpMinusSet, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 552, R"(<<>>=~&=)", {OpLShift, OpRShiftSet, OpBitNot, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 553, R"(->>>||=>=)", {OpMinus, OpROTR, OpLogicOrSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 554, R"(=>?|=.)", {OpArrow, OpTernary, OpBitOrSet, OpDot, Token()});
TEST_CASE(Operator, Permute, 555, R"(/=-..|)", {OpSlashSet, OpMinus, OpRange, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 556, R"(.!--+=)", {OpDot, OpLogicNot, OpDec, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 557, R"(==&=~/)", {OpEq, OpBitAndSet, OpBitNot, OpSlash, Token()});
TEST_CASE(Operator, Permute, 558, R"(&&=+-=^)", {OpLogicAndSet, OpPlus, OpMinusSet, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 559, R"(...<=-.)", {OpEllipsis, OpLE, OpMinus, OpDot, Token()});
TEST_CASE(Operator, Permute, 560, R"(^=>>>>>...)", {OpBitXorSet, OpROTR, OpRShift, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 561, R"(!=>>>=/=*)", {OpNE, OpROTRSet, OpSlashSet, OpTimes, Token()});
TEST_CASE(Operator, Permute, 562, R"(^^=..>=)", {OpLogicXorSet, OpRange, OpGT, OpSet, Token()});
TEST_CASE(Operator, Permute, 563, R"(...+=>=)", {OpRange, OpDot, OpPlusSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 564, R"(=>>>=&=...)", {OpArrow, OpRShiftSet, OpBitAndSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 565, R"(=>>=|&=)", {OpArrow, OpGE, OpBitOr, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 566, R"(<=?>>>>>)", {OpLE, OpTernary, OpRShift, OpROTR, Token()});
TEST_CASE(Operator, Permute, 567, R"(%&&=<<<=&&)", {OpPercent, OpLogicAndSet, OpROTLSet, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 568, R"(%*===*)", {OpPercent, OpTimesSet, OpEq, OpTimes, Token()});
TEST_CASE(Operator, Permute, 569, R"(||=>=/=!)", {OpLogicOrSet, OpGE, OpSlashSet, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 570, R"(/=>>=^^)", {OpSlash, OpSet, OpRShiftSet, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 571, R"(!=++>>=&&=)", {OpNE, OpInc, OpRShiftSet, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 572, R"(!=^^<<<)", {OpLogicNot, OpSet, OpLogicXor, OpROTL, Token()});
TEST_CASE(Operator, Permute, 573, R"(|=^^=^-)", {OpBitOrSet, OpLogicXorSet, OpBitXor, OpMinus, Token()});
TEST_CASE(Operator, Permute, 574, R"(*=>-=^)", {OpTimesSet, OpGT, OpMinusSet, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 575, R"(<<<=.?>>>=)", {OpROTLSet, OpDot, OpTernary, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 576, R"(||>*+)", {OpLogicOr, OpGT, OpTimes, OpPlus, Token()});
TEST_CASE(Operator, Permute, 577, R"(==!&&=>>=)", {OpEq, OpLogicNot, OpLogicAndSet, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 578, R"(^=+=^^<<)", {OpBitXorSet, OpPlusSet, OpLogicXor, OpLShift, Token()});
TEST_CASE(Operator, Permute, 579, R"(>>>=<<<=&&=)", {OpROTRSet, OpLT, OpLShiftSet, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 580, R"(&&&&=^===)", {OpLogicAnd, OpLogicAndSet, OpBitXorSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 581, R"(-%=^|)", {OpMinus, OpPercentSet, OpBitXor, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 582, R"(~|.+)", {OpBitNot, OpBitOr, OpDot, OpPlus, Token()});
TEST_CASE(Operator, Permute, 583, R"(|=|=*)", {OpBitOr, OpSet, OpBitOrSet, OpTimes, Token()});
TEST_CASE(Operator, Permute, 584, R"(.+>>=/=)", {OpDot, OpPlus, OpRShiftSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 585, R"(>>=>>^=+)", {OpRShiftSet, OpRShift, OpBitXorSet, OpPlus, Token()});
TEST_CASE(Operator, Permute, 586, R"(=>>>=...<)", {OpSet, OpROTRSet, OpEllipsis, OpLT, Token()});
TEST_CASE(Operator, Permute, 587, R"(^===+=*)", {OpBitXorSet, OpEq, OpPlusSet, OpTimes, Token()});
TEST_CASE(Operator, Permute, 588, R"(/~/=|)", {OpSlash, OpBitNot, OpSlashSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 589, R"(>>!=~/=)", {OpRShift, OpNE, OpBitNot, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 590, R"(++/=--||)", {OpInc, OpSlashSet, OpDec, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 591, R"(<=-=^^<<<=)", {OpLE, OpMinusSet, OpLogicXor, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 592, R"(|~&=...)", {OpBitOr, OpBitNot, OpBitAndSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 593, R"(%&&=^=^^=)", {OpPercent, OpLogicAndSet, OpBitXorSet, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 594, R"(<<=^=&..)", {OpLShiftSet, OpBitXorSet, OpBitAnd, OpRange, Token()});
TEST_CASE(Operator, Permute, 595, R"(.>>&<<<)", {OpDot, OpRShift, OpBitAnd, OpROTL, Token()});
TEST_CASE(Operator, Permute, 596, R"(>=!...|)", {OpGE, OpLogicNot, OpEllipsis, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 597, R"(&=/--^^=)", {OpBitAndSet, OpSlash, OpDec, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 598, R"(!=>=>~)", {OpNE, OpGE, OpGT, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 599, R"(>>=+=%|)", {OpRShiftSet, OpPlusSet, OpPercent, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 600, R"(==||=--)", {OpEq, OpBitOr, OpBitOrSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 601, R"(^^=/>>>-)", {OpLogicXorSet, OpSlash, OpROTR, OpMinus, Token()});
TEST_CASE(Operator, Permute, 602, R"(!-=>>=<=)", {OpLogicNot, OpMinusSet, OpRShiftSet, OpLE, Token()});
TEST_CASE(Operator, Permute, 603, R"(<<<=.....*=)", {OpROTLSet, OpEllipsis, OpRange, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 604, R"(>>>=%...++)", {OpROTRSet, OpPercent, OpEllipsis, OpInc, Token()});
TEST_CASE(Operator, Permute, 605, R"(--<<<^=++)", {OpDec, OpROTL, OpBitXorSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 606, R"(>>>=...++||=)", {OpROTRSet, OpEllipsis, OpInc, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 607, R"(+...-=*)", {OpPlus, OpEllipsis, OpMinusSet, OpTimes, Token()});
TEST_CASE(Operator, Permute, 608, R"(<<=+>>><)", {OpLShiftSet, OpPlus, OpROTR, OpLT, Token()});
TEST_CASE(Operator, Permute, 609, R"(^^=<<<=/>=)", {OpLogicXorSet, OpROTLSet, OpSlash, OpGE, Token()});
TEST_CASE(Operator, Permute, 610, R"(<<<=.>>==)", {OpROTLSet, OpDot, OpRShiftSet, OpSet, Token()});
TEST_CASE(Operator, Permute, 611, R"(=>--^.)", {OpArrow, OpDec, OpBitXor, OpDot, Token()});
TEST_CASE(Operator, Permute, 612, R"(<<<=-=^=>)", {OpROTLSet, OpMinusSet, OpBitXorSet, OpGT, Token()});
TEST_CASE(Operator, Permute, 613, R"(>=~=>>=)", {OpGE, OpBitNot, OpSet, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 614, R"(>>=>>>=~>>>)", {OpRShiftSet, OpROTRSet, OpBitNot, OpROTR, Token()});
TEST_CASE(Operator, Permute, 615, R"(+=+=|=)", {OpPlusSet, OpPlus, OpSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 616, R"(/%=!=||)", {OpSlash, OpPercentSet, OpNE, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 617, R"(&=<<<=+++=)", {OpBitAndSet, OpROTLSet, OpInc, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 618, R"(-&&=<<>>>)", {OpMinus, OpLogicAndSet, OpLShift, OpROTR, Token()});
TEST_CASE(Operator, Permute, 619, R"(+&&!=^)", {OpPlus, OpLogicAnd, OpNE, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 620, R"(<<<=^>..)", {OpROTLSet, OpBitXor, OpGT, OpRange, Token()});
TEST_CASE(Operator, Permute, 621, R"(|=&&==<)", {OpBitOrSet, OpLogicAndSet, OpSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 622, R"(&&=^&=<)", {OpLogicAndSet, OpBitXor, OpBitAndSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 623, R"(|>>>=^=&)", {OpBitOr, OpROTRSet, OpBitXorSet, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 624, R"(--&&>>>=<)", {OpDec, OpLogicAnd, OpROTRSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 625, R"(<<<=^^|%)", {OpROTLSet, OpLogicXor, OpBitOr, OpPercent, Token()});
TEST_CASE(Operator, Permute, 626, R"(<<<>=||=...)", {OpROTL, OpGE, OpLogicOrSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 627, R"(+=<<=^^^^=)", {OpPlusSet, OpLShiftSet, OpLogicXor, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 628, R"(<<<*>=...)", {OpROTL, OpTimes, OpGE, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 629, R"(^^*~|)", {OpLogicXor, OpTimes, OpBitNot, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 630, R"(*+<<<%)", {OpTimes, OpPlus, OpROTL, OpPercent, Token()});
TEST_CASE(Operator, Permute, 631, R"(--.-<=)", {OpDec, OpDot, OpMinus, OpLE, Token()});
TEST_CASE(Operator, Permute, 632, R"(&&=<<=>+=)", {OpLogicAndSet, OpLShiftSet, OpGT, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 633, R"(=>++==>>=)", {OpArrow, OpInc, OpEq, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 634, R"(&=+==>>>=)", {OpBitAndSet, OpPlus, OpEq, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 635, R"(<<<=-=||>=)", {OpROTLSet, OpMinusSet, OpLogicOr, OpGE, Token()});
TEST_CASE(Operator, Permute, 636, R"(?^>>=^^=)", {OpTernary, OpBitXor, OpRShiftSet, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 637, R"(&|<=>>>)", {OpBitAnd, OpBitOr, OpLE, OpROTR, Token()});
TEST_CASE(Operator, Permute, 638, R"(<<=>>..=)", {OpLShiftSet, OpRShift, OpRange, OpSet, Token()});
TEST_CASE(Operator, Permute, 639, R"(++<&&=!=)", {OpInc, OpLT, OpLogicAndSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 640, R"(++?&&=&)", {OpInc, OpTernary, OpLogicAndSet, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 641, R"(<-=%^)", {OpLT, OpMinusSet, OpPercent, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 642, R"(=^^=<<<=>)", {OpSet, OpLogicXorSet, OpROTL, OpArrow, Token()});
TEST_CASE(Operator, Permute, 643, R"(>>=!====>)", {OpRShiftSet, OpNE, OpEq, OpArrow, Token()});
TEST_CASE(Operator, Permute, 644, R"(?>=+&&)", {OpTernary, OpGE, OpPlus, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 645, R"(&&=>=..^^=)", {OpLogicAndSet, OpGE, OpRange, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 646, R"(%^^=++)", {OpPercent, OpLogicXor, OpSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 647, R"(>>=!=^^=<<=)", {OpRShiftSet, OpNE, OpLogicXorSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 648, R"(^=&=|^^)", {OpBitXorSet, OpBitAndSet, OpBitOr, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 649, R"(+++./=)", {OpInc, OpPlus, OpDot, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 650, R"(...+=/)", {OpEllipsis, OpPlus, OpSet, OpSlash, Token()});
TEST_CASE(Operator, Permute, 651, R"(!=||!>>>=)", {OpNE, OpLogicOr, OpLogicNot, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 652, R"(<<<-->>>^)", {OpROTL, OpDec, OpROTR, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 653, R"(>>>-<<<=...)", {OpROTR, OpMinus, OpROTLSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 654, R"(+=-->?)", {OpPlusSet, OpDec, OpGT, OpTernary, Token()});
TEST_CASE(Operator, Permute, 655, R"(^==>>><)", {OpBitXorSet, OpSet, OpROTR, OpLT, Token()});
TEST_CASE(Operator, Permute, 656, R"(<<<=<=--!)", {OpROTLSet, OpLE, OpDec, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 657, R"(--<<=^^~)", {OpDec, OpLShiftSet, OpLogicXor, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 658, R"(>>?+^^)", {OpRShift, OpTernary, OpPlus, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 659, R"(-->=%=++)", {OpDec, OpGE, OpPercentSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 660, R"(||=><<<=--)", {OpLogicOrSet, OpGT, OpROTLSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 661, R"(!=/=>=%)", {OpNE, OpSlashSet, OpGE, OpPercent, Token()});
TEST_CASE(Operator, Permute, 662, R"(...<<<%!=)", {OpEllipsis, OpROTL, OpPercent, OpNE, Token()});
TEST_CASE(Operator, Permute, 663, R"(^=*=>>>>=)", {OpBitXorSet, OpTimesSet, OpGT, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 664, R"(%-&=|=)", {OpPercent, OpMinus, OpBitAndSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 665, R"(||=?.*=)", {OpLogicOrSet, OpTernary, OpDot, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 666, R"(|<<<&&.)", {OpBitOr, OpROTL, OpLogicAnd, OpDot, Token()});
TEST_CASE(Operator, Permute, 667, R"(.../=|=?)", {OpEllipsis, OpSlashSet, OpBitOrSet, OpTernary, Token()});
TEST_CASE(Operator, Permute, 668, R"(?&&=^^=&=)", {OpTernary, OpLogicAndSet, OpLogicXorSet, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 669, R"(<=&!=&&=)", {OpLE, OpBitAnd, OpNE, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 670, R"(..&<=?)", {OpRange, OpBitAnd, OpLE, OpTernary, Token()});
TEST_CASE(Operator, Permute, 671, R"(<<<&...-)", {OpROTL, OpBitAnd, OpEllipsis, OpMinus, Token()});
TEST_CASE(Operator, Permute, 672, R"(!||&=*=)", {OpLogicNot, OpLogicOr, OpBitAndSet, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 673, R"(>=+.^)", {OpGE, OpPlus, OpDot, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 674, R"(^^=^><<<)", {OpLogicXorSet, OpBitXor, OpGT, OpROTL, Token()});
TEST_CASE(Operator, Permute, 675, R"(<=&==>-)", {OpLE, OpBitAndSet, OpArrow, OpMinus, Token()});
TEST_CASE(Operator, Permute, 676, R"(<=*=-.)", {OpLE, OpTimesSet, OpMinus, OpDot, Token()});
TEST_CASE(Operator, Permute, 677, R"(~?..<)", {OpBitNot, OpTernary, OpRange, OpLT, Token()});
TEST_CASE(Operator, Permute, 678, R"(====>*=)", {OpSet, OpEq, OpArrow, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 679, R"(<..<==>)", {OpLT, OpRange, OpLE, OpArrow, Token()});
TEST_CASE(Operator, Permute, 680, R"(<=&=^^|=)", {OpLE, OpBitAndSet, OpLogicXor, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 681, R"(^=||=>>>>)", {OpBitXorSet, OpLogicOr, OpArrow, OpROTR, Token()});
TEST_CASE(Operator, Permute, 682, R"(>&=||?)", {OpGT, OpBitAndSet, OpLogicOr, OpTernary, Token()});
TEST_CASE(Operator, Permute, 683, R"(!=/-=>=)", {OpNE, OpSlash, OpMinusSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 684, R"(=><<=>>...)", {OpArrow, OpLShiftSet, OpRShift, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 685, R"(===---)", {OpSet, OpEq, OpMinus, OpDec, Token()});
TEST_CASE(Operator, Permute, 686, R"(&&&=>=|=)", {OpBitAnd, OpLogicAndSet, OpGE, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 687, R"(+?!===)", {OpPlus, OpTernary, OpNE, OpEq, Token()});
TEST_CASE(Operator, Permute, 688, R"(<=++==||)", {OpLE, OpInc, OpEq, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 689, R"(||=+=^^/)", {OpLogicOrSet, OpPlusSet, OpLogicXor, OpSlash, Token()});
TEST_CASE(Operator, Permute, 690, R"(<=-+=--)", {OpLE, OpMinus, OpPlusSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 691, R"(~--+^^=)", {OpBitNot, OpDec, OpPlus, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 692, R"(<<<<==>-)", {OpROTL, OpLE, OpArrow, OpMinus, Token()});
TEST_CASE(Operator, Permute, 693, R"(*..&&=-)", {OpTimes, OpRange, OpLogicAndSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 694, R"(^^=>=/=--)", {OpLogicXorSet, OpGE, OpSlashSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 695, R"(==%=<<--)", {OpEq, OpPercentSet, OpLShift, OpDec, Token()});
TEST_CASE(Operator, Permute, 696, R"(<<<=--&=<<<)", {OpROTLSet, OpDec, OpBitAndSet, OpROTL, Token()});
TEST_CASE(Operator, Permute, 697, R"(|=!..)", {OpBitOr, OpSet, OpLogicNot, OpRange, Token()});
TEST_CASE(Operator, Permute, 698, R"(<<>>=<<<=)", {OpLShift, OpRShift, OpSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 699, R"(!<<<=>=?)", {OpLogicNot, OpROTLSet, OpGE, OpTernary, Token()});
TEST_CASE(Operator, Permute, 700, R"(*-=|%=)", {OpTimes, OpMinusSet, OpBitOr, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 701, R"(>?|=>)", {OpGT, OpTernary, OpBitOr, OpArrow, Token()});
TEST_CASE(Operator, Permute, 702, R"(.....>>++)", {OpRange, OpEllipsis, OpRShift, OpInc, Token()});
TEST_CASE(Operator, Permute, 703, R"(?&&=>>>=..)", {OpTernary, OpLogicAndSet, OpROTRSet, OpRange, Token()});
TEST_CASE(Operator, Permute, 704, R"(-!=>>>!)", {OpMinus, OpNE, OpROTR, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 705, R"(<>=<<*=)", {OpLT, OpGE, OpLShift, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 706, R"(<<</=--)", {OpLShift, OpLT, OpSlashSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 707, R"(==>>=--~)", {OpEq, OpRShiftSet, OpDec, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 708, R"(<~>>>...)", {OpLT, OpBitNot, OpROTR, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 709, R"(&....+=)", {OpBitAnd, OpEllipsis, OpDot, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 710, R"(>=||=..^^=)", {OpGE, OpLogicOrSet, OpRange, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 711, R"(*+>>>-)", {OpTimes, OpPlus, OpROTR, OpMinus, Token()});
TEST_CASE(Operator, Permute, 712, R"(>>>=||%/)", {OpROTRSet, OpLogicOr, OpPercent, OpSlash, Token()});
TEST_CASE(Operator, Permute, 713, R"(^^=--/=.)", {OpLogicXorSet, OpDec, OpSlashSet, OpDot, Token()});
TEST_CASE(Operator, Permute, 714, R"(=/^^>>=)", {OpSet, OpSlash, OpLogicXor, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 715, R"(/=<<<=..-=)", {OpSlashSet, OpROTLSet, OpRange, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 716, R"(--*=<<=<=)", {OpDec, OpTimesSet, OpLShiftSet, OpLE, Token()});
TEST_CASE(Operator, Permute, 717, R"(?>>==/=)", {OpTernary, OpRShift, OpEq, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 718, R"(++&=*^^=)", {OpInc, OpBitAndSet, OpTimes, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 719, R"(+~&=*=)", {OpPlus, OpBitNot, OpBitAndSet, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 720, R"(>&&=%=...)", {OpGT, OpLogicAndSet, OpPercentSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 721, R"(<=+=+!=)", {OpLE, OpPlusSet, OpPlus, OpNE, Token()});
TEST_CASE(Operator, Permute, 722, R"(>>=>>>=*-)", {OpRShiftSet, OpROTRSet, OpTimes, OpMinus, Token()});
TEST_CASE(Operator, Permute, 723, R"(%=<=%<)", {OpPercentSet, OpLE, OpPercent, OpLT, Token()});
TEST_CASE(Operator, Permute, 724, R"(||..|*)", {OpLogicOr, OpRange, OpBitOr, OpTimes, Token()});
TEST_CASE(Operator, Permute, 725, R"(/=&&.<=)", {OpSlashSet, OpLogicAnd, OpDot, OpLE, Token()});
TEST_CASE(Operator, Permute, 726, R"(+&!%)", {OpPlus, OpBitAnd, OpLogicNot, OpPercent, Token()});
TEST_CASE(Operator, Permute, 727, R"(=>+==+)", {OpArrow, OpPlusSet, OpSet, OpPlus, Token()});
TEST_CASE(Operator, Permute, 728, R"(==+=/=^^=)", {OpEq, OpPlusSet, OpSlashSet, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 729, R"(>..++&)", {OpGT, OpRange, OpInc, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 730, R"(-=^=+=<<<)", {OpMinusSet, OpBitXorSet, OpPlusSet, OpROTL, Token()});
TEST_CASE(Operator, Permute, 731, R"(.^=%==)", {OpDot, OpBitXorSet, OpPercentSet, OpSet, Token()});
TEST_CASE(Operator, Permute, 732, R"(--|=+>)", {OpDec, OpBitOrSet, OpPlus, OpGT, Token()});
TEST_CASE(Operator, Permute, 733, R"(=><<=%&)", {OpArrow, OpLShiftSet, OpPercent, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 734, R"(?||...)", {OpTernary, OpLogicOr, OpDot, OpRange, Token()});
TEST_CASE(Operator, Permute, 735, R"(!|||...)", {OpLogicNot, OpLogicOr, OpBitOr, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 736, R"(>>==&<<)", {OpRShift, OpEq, OpBitAnd, OpLShift, Token()});
TEST_CASE(Operator, Permute, 737, R"(/=|=^^>>)", {OpSlashSet, OpBitOrSet, OpLogicXor, OpRShift, Token()});
TEST_CASE(Operator, Permute, 738, R"(^&===*)", {OpBitXor, OpBitAndSet, OpEq, OpTimes, Token()});
TEST_CASE(Operator, Permute, 739, R"(.../=>=)", {OpDot, OpRange, OpSlashSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 740, R"(>>==<=^^=)", {OpRShift, OpEq, OpLE, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 741, R"(>>=>>>=..=>)", {OpRShiftSet, OpROTRSet, OpRange, OpArrow, Token()});
TEST_CASE(Operator, Permute, 742, R"(<<=!=<<++)", {OpLShiftSet, OpNE, OpLShift, OpInc, Token()});
TEST_CASE(Operator, Permute, 743, R"(>>>=<<=~&&)", {OpROTRSet, OpLShiftSet, OpBitNot, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 744, R"(&&>>>=>>*)", {OpLogicAnd, OpROTRSet, OpRShift, OpTimes, Token()});
TEST_CASE(Operator, Permute, 745, R"(%^^^==)", {OpPercent, OpLogicXor, OpBitXorSet, OpSet, Token()});
TEST_CASE(Operator, Permute, 746, R"(?^=~&&=)", {OpTernary, OpBitXorSet, OpBitNot, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 747, R"(<<<=!<<>=)", {OpROTLSet, OpLogicNot, OpLShift, OpGE, Token()});
TEST_CASE(Operator, Permute, 748, R"(==%=!=~)", {OpEq, OpPercentSet, OpNE, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 749, R"(+=><<<<<=)", {OpPlusSet, OpGT, OpLShift, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 750, R"(|*=+=*)", {OpBitOr, OpTimesSet, OpPlusSet, OpTimes, Token()});
TEST_CASE(Operator, Permute, 751, R"(>===<</=)", {OpGE, OpEq, OpLShift, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 752, R"(>>>=^|=--)", {OpROTRSet, OpBitXor, OpBitOrSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 753, R"(>>-...&=)", {OpRShift, OpMinus, OpEllipsis, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 754, R"(==>=>&)", {OpEq, OpGT, OpArrow, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 755, R"(<<=>>>=>>>||)", {OpLShiftSet, OpROTRSet, OpROTR, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 756, R"(^*||+)", {OpBitXor, OpTimes, OpLogicOr, OpPlus, Token()});
TEST_CASE(Operator, Permute, 757, R"(..!=>>>|=)", {OpRange, OpNE, OpROTR, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 758, R"(||%==>--)", {OpLogicOr, OpPercentSet, OpArrow, OpDec, Token()});
TEST_CASE(Operator, Permute, 759, R"(||<+==>)", {OpLogicOr, OpLT, OpPlusSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 760, R"(<<=^^=!=<)", {OpLShiftSet, OpLogicXorSet, OpNE, OpLT, Token()});
TEST_CASE(Operator, Permute, 761, R"(%--<=>=)", {OpPercent, OpDec, OpLE, OpGE, Token()});
TEST_CASE(Operator, Permute, 762, R"(=...%=<)", {OpSet, OpEllipsis, OpPercentSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 763, R"(=!=*=<)", {OpSet, OpNE, OpTimesSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 764, R"(+<<=/=?)", {OpPlus, OpLShiftSet, OpSlashSet, OpTernary, Token()});
TEST_CASE(Operator, Permute, 765, R"(>>>/^.)", {OpROTR, OpSlash, OpBitXor, OpDot, Token()});
TEST_CASE(Operator, Permute, 766, R"(&/.<=)", {OpBitAnd, OpSlash, OpDot, OpLE, Token()});
TEST_CASE(Operator, Permute, 767, R"(>>>=<<<=?-=)", {OpROTRSet, OpROTLSet, OpTernary, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 768, R"(<?=>.)", {OpLT, OpTernary, OpArrow, OpDot, Token()});
TEST_CASE(Operator, Permute, 769, R"(&=--+=||=)", {OpBitAndSet, OpDec, OpPlusSet, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 770, R"(/...||||=)", {OpSlash, OpEllipsis, OpLogicOr, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 771, R"(^=&>=>>>)", {OpBitXorSet, OpBitAnd, OpGE, OpROTR, Token()});
TEST_CASE(Operator, Permute, 772, R"(==+<<=+=)", {OpEq, OpPlus, OpLShiftSet, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 773, R"(/=>>>...!=)", {OpSlashSet, OpROTR, OpEllipsis, OpNE, Token()});
TEST_CASE(Operator, Permute, 774, R"(=<=!^)", {OpSet, OpLE, OpLogicNot, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 775, R"(-->>>/=<<=)", {OpDec, OpROTR, OpSlashSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 776, R"(<<<=||>>=*=)", {OpROTLSet, OpLogicOr, OpRShiftSet, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 777, R"(==/&&=<<<=)", {OpEq, OpSlash, OpLogicAndSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 778, R"(||=<</..)", {OpLogicOrSet, OpLShift, OpSlash, OpRange, Token()});
TEST_CASE(Operator, Permute, 779, R"(---++...)", {OpDec, OpMinus, OpInc, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 780, R"(!>>=^=>=)", {OpLogicNot, OpRShiftSet, OpBitXorSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 781, R"(||...>>=<=)", {OpLogicOr, OpEllipsis, OpRShiftSet, OpLE, Token()});
TEST_CASE(Operator, Permute, 782, R"(++%^/)", {OpInc, OpPercent, OpBitXor, OpSlash, Token()});
TEST_CASE(Operator, Permute, 783, R"(^=&&=<<<=^)", {OpBitXorSet, OpLogicAndSet, OpROTLSet, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 784, R"(^^%=>...)", {OpLogicXor, OpPercentSet, OpGT, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 785, R"(>*--=)", {OpGT, OpTimes, OpDec, OpSet, Token()});
TEST_CASE(Operator, Permute, 786, R"(&&=^^||=&&)", {OpLogicAndSet, OpLogicXor, OpLogicOrSet, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 787, R"(^-=?<<)", {OpBitXor, OpMinusSet, OpTernary, OpLShift, Token()});
TEST_CASE(Operator, Permute, 788, R"(~<<=>>>=^=)", {OpBitNot, OpLShiftSet, OpROTRSet, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 789, R"(&&=|=<<=<<<=)", {OpLogicAndSet, OpBitOrSet, OpLShiftSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 790, R"(<=..%*)", {OpLE, OpRange, OpPercent, OpTimes, Token()});
TEST_CASE(Operator, Permute, 791, R"(++==<^^=)", {OpInc, OpEq, OpLT, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 792, R"(/-=...~)", {OpSlash, OpMinusSet, OpEllipsis, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 793, R"(*=?-=--)", {OpTimesSet, OpTernary, OpMinusSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 794, R"(||!=+=..)", {OpLogicOr, OpNE, OpPlusSet, OpRange, Token()});
TEST_CASE(Operator, Permute, 795, R"(*=~^<<=)", {OpTimesSet, OpBitNot, OpBitXor, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 796, R"(|<<<=^=>>)", {OpBitOr, OpROTLSet, OpBitXorSet, OpRShift, Token()});
TEST_CASE(Operator, Permute, 797, R"(+==%=&=)", {OpPlus, OpEq, OpPercentSet, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 798, R"(^^=|!=..)", {OpLogicXorSet, OpBitOr, OpNE, OpRange, Token()});
TEST_CASE(Operator, Permute, 799, R"(^...>>>=~)", {OpBitXor, OpEllipsis, OpROTRSet, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 800, R"(--^===&&)", {OpDec, OpBitXorSet, OpEq, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 801, R"(<*^>>=)", {OpLT, OpTimes, OpBitXor, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 802, R"(%=<<=++/)", {OpPercentSet, OpLShiftSet, OpInc, OpSlash, Token()});
TEST_CASE(Operator, Permute, 803, R"(.<<<=/!=)", {OpDot, OpROTLSet, OpSlash, OpNE, Token()});
TEST_CASE(Operator, Permute, 804, R"(**===>>)", {OpTimes, OpTimesSet, OpEq, OpRShift, Token()});
TEST_CASE(Operator, Permute, 805, R"(<=|&&&&=)", {OpLE, OpBitOr, OpLogicAnd, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 806, R"(&=*===<<)", {OpBitAndSet, OpTimesSet, OpEq, OpLShift, Token()});
TEST_CASE(Operator, Permute, 807, R"(...*-=<=)", {OpEllipsis, OpTimes, OpMinusSet, OpLE, Token()});
TEST_CASE(Operator, Permute, 808, R"(*=--+&=)", {OpTimesSet, OpDec, OpPlus, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 809, R"(-=<<<<<)", {OpMinus, OpSet, OpLShift, OpROTL, Token()});
TEST_CASE(Operator, Permute, 810, R"(|=^^*)", {OpBitOr, OpSet, OpLogicXor, OpTimes, Token()});
TEST_CASE(Operator, Permute, 811, R"(>>><<<=?==)", {OpROTR, OpROTLSet, OpTernary, OpEq, Token()});
TEST_CASE(Operator, Permute, 812, R"(<<<==<<<^^)", {OpROTLSet, OpSet, OpROTL, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 813, R"(+=/=--..)", {OpPlusSet, OpSlashSet, OpDec, OpRange, Token()});
TEST_CASE(Operator, Permute, 814, R"(%>>>=!=)", {OpPercent, OpRShift, OpGE, OpNE, Token()});
TEST_CASE(Operator, Permute, 815, R"(&/-!=)", {OpBitAnd, OpSlash, OpMinus, OpNE, Token()});
TEST_CASE(Operator, Permute, 816, R"(<<^%==)", {OpLShift, OpBitXor, OpPercentSet, OpSet, Token()});
TEST_CASE(Operator, Permute, 817, R"(>|!=*)", {OpGT, OpBitOr, OpNE, OpTimes, Token()});
TEST_CASE(Operator, Permute, 818, R"(?/=-=&)", {OpTernary, OpSlashSet, OpMinusSet, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 819, R"(<<=<=!-)", {OpLShiftSet, OpLE, OpLogicNot, OpMinus, Token()});
TEST_CASE(Operator, Permute, 820, R"(%>>>=>>=/=)", {OpPercent, OpROTRSet, OpRShiftSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 821, R"(=/=||=|)", {OpSet, OpSlashSet, OpLogicOrSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 822, R"(+++=||-=)", {OpInc, OpPlusSet, OpLogicOr, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 823, R"(>>>=*?>=)", {OpROTRSet, OpTimes, OpTernary, OpGE, Token()});
TEST_CASE(Operator, Permute, 824, R"(>>!>=.)", {OpRShift, OpLogicNot, OpGE, OpDot, Token()});
TEST_CASE(Operator, Permute, 825, R"(||=&-|)", {OpLogicOrSet, OpBitAnd, OpMinus, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 826, R"(^^...=>=)", {OpLogicXor, OpEllipsis, OpArrow, OpSet, Token()});
TEST_CASE(Operator, Permute, 827, R"(&-=^^>>>)", {OpBitAnd, OpMinusSet, OpLogicXor, OpROTR, Token()});
TEST_CASE(Operator, Permute, 828, R"(!*=...?)", {OpLogicNot, OpTimesSet, OpEllipsis, OpTernary, Token()});
TEST_CASE(Operator, Permute, 829, R"(||=+-=<<)", {OpLogicOrSet, OpPlus, OpMinusSet, OpLShift, Token()});
TEST_CASE(Operator, Permute, 830, R"(&&&=%>>>)", {OpLogicAnd, OpBitAndSet, OpPercent, OpROTR, Token()});
TEST_CASE(Operator, Permute, 831, R"(==^=+=<)", {OpEq, OpBitXorSet, OpPlusSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 832, R"(=/=<<>>)", {OpSet, OpSlashSet, OpLShift, OpRShift, Token()});
TEST_CASE(Operator, Permute, 833, R"(~*=^=^^)", {OpBitNot, OpTimesSet, OpBitXorSet, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 834, R"(/=*+!)", {OpSlashSet, OpTimes, OpPlus, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 835, R"(|&&-=~)", {OpBitOr, OpLogicAnd, OpMinusSet, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 836, R"(=><<<=-=|)", {OpArrow, OpROTLSet, OpMinusSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 837, R"(<<<!--||)", {OpROTL, OpLogicNot, OpDec, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 838, R"(?^/>=)", {OpTernary, OpBitXor, OpSlash, OpGE, Token()});
TEST_CASE(Operator, Permute, 839, R"(~<<&=^^)", {OpBitNot, OpLShift, OpBitAndSet, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 840, R"(^&=.<)", {OpBitXor, OpBitAndSet, OpDot, OpLT, Token()});
TEST_CASE(Operator, Permute, 841, R"(==<<!=..)", {OpEq, OpLShift, OpNE, OpRange, Token()});
TEST_CASE(Operator, Permute, 842, R"(&=<>&&)", {OpBitAndSet, OpLT, OpGT, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 843, R"(+==>~..)", {OpPlusSet, OpArrow, OpBitNot, OpRange, Token()});
TEST_CASE(Operator, Permute, 844, R"(&=-.<)", {OpBitAndSet, OpMinus, OpDot, OpLT, Token()});
TEST_CASE(Operator, Permute, 845, R"(|<<=<<<?)", {OpBitOr, OpLShiftSet, OpROTL, OpTernary, Token()});
TEST_CASE(Operator, Permute, 846, R"(/==>>==>)", {OpSlash, OpEq, OpRShiftSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 847, R"(=<=++&&)", {OpSet, OpLE, OpInc, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 848, R"(>===+=)", {OpGT, OpSet, OpEq, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 849, R"(|^^...+)", {OpBitOr, OpLogicXor, OpEllipsis, OpPlus, Token()});
TEST_CASE(Operator, Permute, 850, R"(&&=|=!=<<<=)", {OpLogicAndSet, OpBitOrSet, OpNE, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 851, R"(&^<=>>>=)", {OpBitAnd, OpBitXor, OpLE, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 852, R"(+=>=||=&&=)", {OpPlusSet, OpGE, OpLogicOrSet, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 853, R"(&&--^^=)", {OpLogicAnd, OpDec, OpLogicXor, OpSet, Token()});
TEST_CASE(Operator, Permute, 854, R"(&&=<<<>>>=+=)", {OpLogicAndSet, OpROTL, OpROTRSet, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 855, R"(<<<-=/&)", {OpROTL, OpMinusSet, OpSlash, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 856, R"(...|=&~)", {OpEllipsis, OpBitOrSet, OpBitAnd, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 857, R"(|=.~^=)", {OpBitOrSet, OpDot, OpBitNot, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 858, R"(=>-->>>)", {OpArrow, OpDec, OpRShift, OpGT, Token()});
TEST_CASE(Operator, Permute, 859, R"(.=>==?)", {OpDot, OpArrow, OpEq, OpTernary, Token()});
TEST_CASE(Operator, Permute, 860, R"(~<<</++)", {OpBitNot, OpROTL, OpSlash, OpInc, Token()});
TEST_CASE(Operator, Permute, 861, R"(..!&||)", {OpRange, OpLogicNot, OpBitAnd, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 862, R"(<<<=++<<=%=)", {OpROTLSet, OpInc, OpLShiftSet, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 863, R"(||=>=^^&&=)", {OpLogicOrSet, OpGE, OpLogicXor, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 864, R"(|+<&=)", {OpBitOr, OpPlus, OpLT, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 865, R"(=>...<<=)", {OpArrow, OpEllipsis, OpLT, OpLE, Token()});
TEST_CASE(Operator, Permute, 866, R"(++!=+~)", {OpInc, OpNE, OpPlus, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 867, R"(+>=.!)", {OpPlus, OpGE, OpDot, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 868, R"(/%=..<)", {OpSlash, OpPercentSet, OpRange, OpLT, Token()});
TEST_CASE(Operator, Permute, 869, R"(|||<<<=>=)", {OpLogicOr, OpBitOr, OpROTLSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 870, R"(^^==>-=+=)", {OpLogicXorSet, OpArrow, OpMinusSet, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 871, R"(!=>>>*<<=)", {OpNE, OpROTR, OpTimes, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 872, R"(&|=!/=)", {OpBitAnd, OpBitOrSet, OpLogicNot, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 873, R"(++||=&+=)", {OpInc, OpLogicOrSet, OpBitAnd, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 874, R"(&&>>=>=+=)", {OpLogicAnd, OpRShiftSet, OpGE, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 875, R"(|...++&=)", {OpBitOr, OpEllipsis, OpInc, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 876, R"(<<<>>>==&=)", {OpROTL, OpROTR, OpEq, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 877, R"(<<=>>=...)", {OpLShiftSet, OpRShift, OpSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 878, R"(/=&&^^=|)", {OpSlashSet, OpLogicAnd, OpLogicXorSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 879, R"(|--==||=)", {OpBitOr, OpDec, OpEq, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 880, R"(...--%=&)", {OpEllipsis, OpDec, OpPercentSet, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 881, R"(>>>&&=-^^=)", {OpROTR, OpLogicAndSet, OpMinus, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 882, R"(>>=|=--&&)", {OpRShiftSet, OpBitOrSet, OpDec, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 883, R"(^=>/=!)", {OpBitXor, OpArrow, OpSlashSet, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 884, R"(&&<<=&&=+)", {OpLogicAnd, OpLShiftSet, OpLogicAndSet, OpPlus, Token()});
TEST_CASE(Operator, Permute, 885, R"(<<<=>>&=)", {OpLShift, OpLE, OpRShift, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 886, R"(..--?!=)", {OpRange, OpDec, OpTernary, OpNE, Token()});
TEST_CASE(Operator, Permute, 887, R"(--^-=^^=)", {OpDec, OpBitXor, OpMinusSet, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 888, R"(<<</>>>==>)", {OpROTL, OpSlash, OpROTRSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 889, R"(~>>>=|%=)", {OpBitNot, OpROTRSet, OpBitOr, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 890, R"(<<<>>>>=&)", {OpROTL, OpRShift, OpRShiftSet, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 891, R"(->>>=-=&&)", {OpMinus, OpROTRSet, OpMinusSet, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 892, R"(<<<=<</=)", {OpLT, OpLShiftSet, OpLShift, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 893, R"(|&&>=+=)", {OpBitOr, OpLogicAnd, OpGE, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 894, R"(||=+=<<<)", {OpLogicOrSet, OpPlusSet, OpLShift, OpLT, Token()});
TEST_CASE(Operator, Permute, 895, R"(%<<=/=|)", {OpPercent, OpLShiftSet, OpSlashSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 896, R"(^=.--*=)", {OpBitXorSet, OpDot, OpDec, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 897, R"(%&?>>)", {OpPercent, OpBitAnd, OpTernary, OpRShift, Token()});
TEST_CASE(Operator, Permute, 898, R"(<<^>>>=-=)", {OpLShift, OpBitXor, OpROTRSet, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 899, R"(*+!=<)", {OpTimes, OpPlus, OpNE, OpLT, Token()});
TEST_CASE(Operator, Permute, 900, R"(==>>==><<<)", {OpEq, OpRShiftSet, OpArrow, OpROTL, Token()});
TEST_CASE(Operator, Permute, 901, R"(&&=--||^^)", {OpLogicAndSet, OpDec, OpLogicOr, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 902, R"(&&--%=|)", {OpLogicAnd, OpDec, OpPercentSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 903, R"(+=*=>)", {OpPlus, OpSet, OpTimes, OpArrow, Token()});
TEST_CASE(Operator, Permute, 904, R"(^^>>>=!=+)", {OpLogicXor, OpROTRSet, OpNE, OpPlus, Token()});
TEST_CASE(Operator, Permute, 905, R"(/||^/=)", {OpSlash, OpLogicOr, OpBitXor, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 906, R"(|%=...>>>)", {OpBitOr, OpPercentSet, OpEllipsis, OpROTR, Token()});
TEST_CASE(Operator, Permute, 907, R"(&&=+=%|)", {OpLogicAndSet, OpPlusSet, OpPercent, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 908, R"(<<~...>>)", {OpLShift, OpBitNot, OpEllipsis, OpRShift, Token()});
TEST_CASE(Operator, Permute, 909, R"(>>=*%==>)", {OpRShiftSet, OpTimes, OpPercentSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 910, R"(!=|..<<<=)", {OpNE, OpBitOr, OpRange, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 911, R"(>>>=+&&?)", {OpROTRSet, OpPlus, OpLogicAnd, OpTernary, Token()});
TEST_CASE(Operator, Permute, 912, R"(||/=%=~)", {OpLogicOr, OpSlashSet, OpPercentSet, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 913, R"(*=?|...)", {OpTimesSet, OpTernary, OpBitOr, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 914, R"(|=<-=<<=)", {OpBitOrSet, OpLT, OpMinusSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 915, R"(%>>>/>=)", {OpPercent, OpROTR, OpSlash, OpGE, Token()});
TEST_CASE(Operator, Permute, 916, R"(^^=>>=^^..)", {OpLogicXorSet, OpRShiftSet, OpLogicXor, OpRange, Token()});
TEST_CASE(Operator, Permute, 917, R"(%=...<<<=.)", {OpPercentSet, OpEllipsis, OpROTLSet, OpDot, Token()});
TEST_CASE(Operator, Permute, 918, R"(<<=+=>=||=)", {OpLShiftSet, OpPlusSet, OpGE, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 919, R"(&>>>=+&&)", {OpBitAnd, OpROTRSet, OpPlus, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 920, R"(%^<=%=)", {OpPercent, OpBitXor, OpLE, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 921, R"(?>==<<<=)", {OpTernary, OpGT, OpEq, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 922, R"(^=|=>>>^^=)", {OpBitXorSet, OpBitOrSet, OpROTR, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 923, R"(*||=/===)", {OpTimes, OpLogicOrSet, OpSlashSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 924, R"(>>>=!<<=)", {OpROTRSet, OpLogicNot, OpLT, OpLE, Token()});
TEST_CASE(Operator, Permute, 925, R"(>>>=/=<=<<=)", {OpROTRSet, OpSlashSet, OpLE, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 926, R"(=>>=*!)", {OpArrow, OpGE, OpTimes, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 927, R"(?=>^^<=)", {OpTernary, OpArrow, OpLogicXor, OpLE, Token()});
TEST_CASE(Operator, Permute, 928, R"(*=>>>=^|)", {OpTimesSet, OpROTRSet, OpBitXor, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 929, R"(!=&=-=<<<=)", {OpNE, OpBitAndSet, OpMinusSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 930, R"(|<<=+=-)", {OpBitOr, OpLShiftSet, OpPlusSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 931, R"(||=/=&...)", {OpLogicOrSet, OpSlashSet, OpBitAnd, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 932, R"(>>>=|&&=...)", {OpROTRSet, OpBitOr, OpLogicAndSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 933, R"(<<=>>=|=.)", {OpLShiftSet, OpRShiftSet, OpBitOrSet, OpDot, Token()});
TEST_CASE(Operator, Permute, 934, R"(++^=>%)", {OpInc, OpBitXor, OpArrow, OpPercent, Token()});
TEST_CASE(Operator, Permute, 935, R"(|<=<<=<)", {OpBitOr, OpLE, OpLShiftSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 936, R"(&=>==<<)", {OpBitAndSet, OpGE, OpSet, OpLShift, Token()});
TEST_CASE(Operator, Permute, 937, R"(&=+/<<)", {OpBitAndSet, OpPlus, OpSlash, OpLShift, Token()});
TEST_CASE(Operator, Permute, 938, R"(>^=^%)", {OpGT, OpBitXorSet, OpBitXor, OpPercent, Token()});
TEST_CASE(Operator, Permute, 939, R"(%<<<=/&=)", {OpPercent, OpROTLSet, OpSlash, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 940, R"(-=<<|=&)", {OpMinusSet, OpLShift, OpBitOrSet, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 941, R"(=&&=>=^)", {OpSet, OpLogicAndSet, OpGE, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 942, R"(=||!%)", {OpSet, OpLogicOr, OpLogicNot, OpPercent, Token()});
TEST_CASE(Operator, Permute, 943, R"(&&*=!=<)", {OpLogicAnd, OpTimesSet, OpNE, OpLT, Token()});
TEST_CASE(Operator, Permute, 944, R"(-=||/*)", {OpMinusSet, OpLogicOr, OpSlash, OpTimes, Token()});
TEST_CASE(Operator, Permute, 945, R"(==<<<<<>>>=)", {OpEq, OpLShift, OpROTL, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 946, R"(*=<<|=>)", {OpTimesSet, OpLShift, OpBitOr, OpArrow, Token()});
TEST_CASE(Operator, Permute, 947, R"(&=||<<=!=)", {OpBitAndSet, OpLogicOr, OpLShiftSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 948, R"(&<<<||=-)", {OpBitAnd, OpROTL, OpLogicOrSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 949, R"(<<<+=>=&&=)", {OpROTL, OpPlusSet, OpGE, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 950, R"(|=&=!=.)", {OpBitOrSet, OpBitAndSet, OpNE, OpDot, Token()});
TEST_CASE(Operator, Permute, 951, R"(&&&>>...)", {OpLogicAnd, OpBitAnd, OpRShift, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 952, R"(.*&=<<<=)", {OpDot, OpTimes, OpBitAndSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 953, R"(.%>=&)", {OpDot, OpPercent, OpGE, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 954, R"(<||=>>=+)", {OpLT, OpLogicOrSet, OpRShiftSet, OpPlus, Token()});
TEST_CASE(Operator, Permute, 955, R"(/=!+>=)", {OpSlashSet, OpLogicNot, OpPlus, OpGE, Token()});
TEST_CASE(Operator, Permute, 956, R"(<=|>>><<=)", {OpLE, OpBitOr, OpROTR, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 957, R"(=>+=^=...)", {OpArrow, OpPlusSet, OpBitXorSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 958, R"(?%=<<<=++)", {OpTernary, OpPercentSet, OpROTLSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 959, R"(^=>&=?)", {OpBitXorSet, OpGT, OpBitAndSet, OpTernary, Token()});
TEST_CASE(Operator, Permute, 960, R"(+%/|)", {OpPlus, OpPercent, OpSlash, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 961, R"(>>>--*=..)", {OpROTR, OpDec, OpTimesSet, OpRange, Token()});
TEST_CASE(Operator, Permute, 962, R"(>>>~%>=)", {OpROTR, OpBitNot, OpPercent, OpGE, Token()});
TEST_CASE(Operator, Permute, 963, R"(!=^=%<<<)", {OpNE, OpBitXorSet, OpPercent, OpROTL, Token()});
TEST_CASE(Operator, Permute, 964, R"(|/*&&=)", {OpBitOr, OpSlash, OpTimes, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 965, R"(!=<=>>)", {OpLogicNot, OpSet, OpLE, OpRShift, Token()});
TEST_CASE(Operator, Permute, 966, R"(?++^+)", {OpTernary, OpInc, OpBitXor, OpPlus, Token()});
TEST_CASE(Operator, Permute, 967, R"(||=*%^)", {OpLogicOrSet, OpTimes, OpPercent, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 968, R"(==>>>=-->=)", {OpEq, OpROTRSet, OpDec, OpGE, Token()});
TEST_CASE(Operator, Permute, 969, R"(<=&&=<<</=)", {OpLE, OpLogicAndSet, OpROTL, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 970, R"(++....+=)", {OpInc, OpDot, OpEllipsis, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 971, R"(>>=|=&&^^=)", {OpRShiftSet, OpBitOrSet, OpLogicAnd, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 972, R"(>>>=<<<&<=)", {OpROTRSet, OpROTL, OpBitAnd, OpLE, Token()});
TEST_CASE(Operator, Permute, 973, R"(++--=...)", {OpInc, OpMinus, OpMinusSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 974, R"(&&>>^^=>)", {OpLogicAnd, OpRShift, OpLogicXorSet, OpGT, Token()});
TEST_CASE(Operator, Permute, 975, R"(>=>>%=<<=)", {OpGE, OpRShift, OpPercentSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 976, R"(==|!&&=)", {OpEq, OpBitOr, OpLogicNot, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 977, R"(*+=>>>=~)", {OpTimes, OpPlusSet, OpROTRSet, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 978, R"(<<=+||=)", {OpLT, OpLE, OpPlus, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 979, R"(<<<==>=-)", {OpROTLSet, OpArrow, OpSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 980, R"(^..++--)", {OpBitXor, OpRange, OpInc, OpDec, Token()});
TEST_CASE(Operator, Permute, 981, R"(>>/=+>)", {OpRShift, OpSlashSet, OpPlus, OpGT, Token()});
TEST_CASE(Operator, Permute, 982, R"(<<<=>>=*|)", {OpROTLSet, OpRShiftSet, OpTimes, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 983, R"(>>>=|<<=!=)", {OpROTRSet, OpBitOr, OpLShiftSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 984, R"(~%=^^=<<=)", {OpBitNot, OpPercentSet, OpLogicXorSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 985, R"(!..&&--)", {OpLogicNot, OpRange, OpLogicAnd, OpDec, Token()});
TEST_CASE(Operator, Permute, 986, R"(%=&++=)", {OpPercentSet, OpBitAnd, OpInc, OpSet, Token()});
TEST_CASE(Operator, Permute, 987, R"(+=--+~)", {OpPlusSet, OpDec, OpPlus, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 988, R"(<<<..>)", {OpLT, OpLShift, OpRange, OpGT, Token()});
TEST_CASE(Operator, Permute, 989, R"(*^+=-)", {OpTimes, OpBitXor, OpPlusSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 990, R"(=>>*=<<<=)", {OpSet, OpRShift, OpTimesSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 991, R"(--^^=>>&&=)", {OpDec, OpLogicXorSet, OpRShift, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 992, R"(>>=&=/=^)", {OpRShiftSet, OpBitAndSet, OpSlashSet, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 993, R"(+<<>>||=)", {OpPlus, OpLShift, OpRShift, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 994, R"(==?&&*)", {OpEq, OpTernary, OpLogicAnd, OpTimes, Token()});
TEST_CASE(Operator, Permute, 995, R"(|=<<<<<<=)", {OpBitOrSet, OpLShift, OpLT, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 996, R"(--&&=-)", {OpDec, OpLogicAnd, OpSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 997, R"(%=?>>>&)", {OpPercentSet, OpTernary, OpROTR, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 998, R"(-!=<=&&)", {OpMinus, OpNE, OpLE, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 999, R"(<<<..>=^=)", {OpROTL, OpRange, OpGE, OpBitXorSet, Token()});
