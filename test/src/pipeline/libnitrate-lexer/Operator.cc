#include <gtest/gtest.h>

#include <pipeline/libnitrate-lexer/LexicalCase.hh>

using namespace ncc::lex;

#pragma clang optimize off

///============================================================================///
/// BUILTIN OPERATORS
TEST_CASE(Operator, Symbol, 0, "+", {OpPlus, Token()});
TEST_CASE(Operator, Symbol, 1, "-", {OpMinus, Token()});
TEST_CASE(Operator, Symbol, 2, "*", {OpTimes, Token()});
TEST_CASE(Operator, Symbol, 3, "/", {OpSlash, Token()});
TEST_CASE(Operator, Symbol, 4, "%", {OpPercent, Token()});
TEST_CASE(Operator, Symbol, 5, "&", {OpBitAnd, Token()});
TEST_CASE(Operator, Symbol, 6, "|", {OpBitOr, Token()});
TEST_CASE(Operator, Symbol, 7, "^", {OpBitXor, Token()});
TEST_CASE(Operator, Symbol, 8, "~", {OpBitNot, Token()});
TEST_CASE(Operator, Symbol, 9, "<<", {OpLShift, Token()});
TEST_CASE(Operator, Symbol, 10, ">>", {OpRShift, Token()});
TEST_CASE(Operator, Symbol, 12, "<<<", {OpROTL, Token()});
TEST_CASE(Operator, Symbol, 13, ">>>", {OpROTR, Token()});
TEST_CASE(Operator, Symbol, 14, "&&", {OpLogicAnd, Token()});
TEST_CASE(Operator, Symbol, 15, "||", {OpLogicOr, Token()});
TEST_CASE(Operator, Symbol, 16, "^^", {OpLogicXor, Token()});
TEST_CASE(Operator, Symbol, 17, "!", {OpLogicNot, Token()});
TEST_CASE(Operator, Symbol, 18, "<", {OpLT, Token()});
TEST_CASE(Operator, Symbol, 19, ">", {OpGT, Token()});
TEST_CASE(Operator, Symbol, 20, "<=", {OpLE, Token()});
TEST_CASE(Operator, Symbol, 21, ">=", {OpGE, Token()});
TEST_CASE(Operator, Symbol, 22, "==", {OpEq, Token()});
TEST_CASE(Operator, Symbol, 23, "!=", {OpNE, Token()});
TEST_CASE(Operator, Symbol, 24, "=", {OpSet, Token()});
TEST_CASE(Operator, Symbol, 25, "+=", {OpPlusSet, Token()});
TEST_CASE(Operator, Symbol, 26, "-=", {OpMinusSet, Token()});
TEST_CASE(Operator, Symbol, 27, "*=", {OpTimesSet, Token()});
TEST_CASE(Operator, Symbol, 28, "/=", {OpSlashSet, Token()});
TEST_CASE(Operator, Symbol, 29, "%=", {OpPercentSet, Token()});
TEST_CASE(Operator, Symbol, 30, "&=", {OpBitAndSet, Token()});
TEST_CASE(Operator, Symbol, 31, "|=", {OpBitOrSet, Token()});
TEST_CASE(Operator, Symbol, 32, "^=", {OpBitXorSet, Token()});
TEST_CASE(Operator, Symbol, 33, "&&=", {OpLogicAndSet, Token()});
TEST_CASE(Operator, Symbol, 34, "||=", {OpLogicOrSet, Token()});
TEST_CASE(Operator, Symbol, 35, "^^=", {OpLogicXorSet, Token()});
TEST_CASE(Operator, Symbol, 36, "<<=", {OpLShiftSet, Token()});
TEST_CASE(Operator, Symbol, 37, ">>=", {OpRShiftSet, Token()});
TEST_CASE(Operator, Symbol, 38, "<<<=", {OpROTLSet, Token()});
TEST_CASE(Operator, Symbol, 39, ">>>=", {OpROTRSet, Token()});
TEST_CASE(Operator, Symbol, 40, "++", {OpInc, Token()});
TEST_CASE(Operator, Symbol, 41, "--", {OpDec, Token()});
TEST_CASE(Operator, Symbol, 42, "as", {OpAs, Token()});
TEST_CASE(Operator, Symbol, 43, "bitcast_as", {OpBitcastAs, Token()});
TEST_CASE(Operator, Symbol, 44, "in", {OpIn, Token()});
TEST_CASE(Operator, Symbol, 45, "out", {OpOut, Token()});
TEST_CASE(Operator, Symbol, 46, "sizeof", {OpSizeof, Token()});
TEST_CASE(Operator, Symbol, 47, "bitsizeof", {OpBitsizeof, Token()});
TEST_CASE(Operator, Symbol, 48, "alignof", {OpAlignof, Token()});
TEST_CASE(Operator, Symbol, 49, "typeof", {OpTypeof, Token()});
TEST_CASE(Operator, Symbol, 50, "comptime", {OpComptime, Token()});
TEST_CASE(Operator, Symbol, 51, ".", {OpDot, Token()});
TEST_CASE(Operator, Symbol, 52, "..", {OpRange, Token()});
TEST_CASE(Operator, Symbol, 53, "...", {OpEllipsis, Token()});
TEST_CASE(Operator, Symbol, 54, "=>", {OpArrow, Token()});
TEST_CASE(Operator, Symbol, 55, "?", {OpTernary, Token()});

///============================================================================///
/// ADJACENT OPERATORS
TEST_CASE(Operator, Adjacent, 200, "++", {OpInc, Token()});
TEST_CASE(Operator, Adjacent, 201, "--", {OpDec, Token()});
TEST_CASE(Operator, Adjacent, 202, "**", {OpTimes, OpTimes, Token()});
TEST_CASE(Operator, Adjacent, 203, "//", {Token(Note, ""), Token()});
TEST_CASE(Operator, Adjacent, 204, "%%", {OpPercent, OpPercent, Token()});
TEST_CASE(Operator, Adjacent, 205, "&&", {OpLogicAnd, Token()});
TEST_CASE(Operator, Adjacent, 206, "||", {OpLogicOr, Token()});
TEST_CASE(Operator, Adjacent, 207, "^^", {OpLogicXor, Token()});
TEST_CASE(Operator, Adjacent, 208, "~~", {OpBitNot, OpBitNot, Token()});
TEST_CASE(Operator, Adjacent, 209, "<<<<", {OpROTL, OpLT, Token()});
TEST_CASE(Operator, Adjacent, 210, ">>>>", {OpROTR, OpGT, Token()});
TEST_CASE(Operator, Adjacent, 212, "<<<<<<", {OpROTL, OpROTL, Token()});
TEST_CASE(Operator, Adjacent, 213, ">>>>>>", {OpROTR, OpROTR, Token()});
TEST_CASE(Operator, Adjacent, 214, "&&&&", {OpLogicAnd, OpLogicAnd, Token()});
TEST_CASE(Operator, Adjacent, 215, "||||", {OpLogicOr, OpLogicOr, Token()});
TEST_CASE(Operator, Adjacent, 216, "^^^^", {OpLogicXor, OpLogicXor, Token()});
TEST_CASE(Operator, Adjacent, 217, "!!", {OpLogicNot, OpLogicNot, Token()});
TEST_CASE(Operator, Adjacent, 218, "<<", {OpLShift, Token()});
TEST_CASE(Operator, Adjacent, 219, ">>", {OpRShift, Token()});
TEST_CASE(Operator, Adjacent, 220, "<=<=", {OpLE, OpLE, Token()});
TEST_CASE(Operator, Adjacent, 221, ">=>=", {OpGE, OpGE, Token()});
TEST_CASE(Operator, Adjacent, 222, "====", {OpEq, OpEq, Token()});
TEST_CASE(Operator, Adjacent, 223, "!=!=", {OpNE, OpNE, Token()});
TEST_CASE(Operator, Adjacent, 224, "==", {OpEq, Token()});
TEST_CASE(Operator, Adjacent, 225, "+=+=", {OpPlusSet, OpPlusSet, Token()});
TEST_CASE(Operator, Adjacent, 226, "-=-=", {OpMinusSet, OpMinusSet, Token()});
TEST_CASE(Operator, Adjacent, 227, "*=*=", {OpTimesSet, OpTimesSet, Token()});
TEST_CASE(Operator, Adjacent, 228, "/=/=", {OpSlashSet, OpSlashSet, Token()});
TEST_CASE(Operator, Adjacent, 229, "%=%=", {OpPercentSet, OpPercentSet, Token()});
TEST_CASE(Operator, Adjacent, 230, "&=&=", {OpBitAndSet, OpBitAndSet, Token()});
TEST_CASE(Operator, Adjacent, 231, "|=|=", {OpBitOrSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Adjacent, 232, "^=^=", {OpBitXorSet, OpBitXorSet, Token()});
TEST_CASE(Operator, Adjacent, 233, "&&=&&=", {OpLogicAndSet, OpLogicAndSet, Token()});
TEST_CASE(Operator, Adjacent, 234, "||=||=", {OpLogicOrSet, OpLogicOrSet, Token()});
TEST_CASE(Operator, Adjacent, 235, "^^=^^=", {OpLogicXorSet, OpLogicXorSet, Token()});
TEST_CASE(Operator, Adjacent, 236, "<<=<<=", {OpLShiftSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Adjacent, 237, ">>=>>=", {OpRShiftSet, OpRShiftSet, Token()});
TEST_CASE(Operator, Adjacent, 238, "<<<=<<<=", {OpROTLSet, OpROTLSet, Token()});
TEST_CASE(Operator, Adjacent, 239, ">>>=>>>=", {OpROTRSet, OpROTRSet, Token()});
TEST_CASE(Operator, Adjacent, 240, "++++", {OpInc, OpInc, Token()});
TEST_CASE(Operator, Adjacent, 241, "----", {OpDec, OpDec, Token()});
TEST_CASE(Operator, Adjacent, 242, "asas", {Token(Name, "asas"), Token()});
TEST_CASE(Operator, Adjacent, 243, "bitcast_asbitcast_as", {Token(Name, "bitcast_asbitcast_as"), Token()});
TEST_CASE(Operator, Adjacent, 244, "inin", {Token(Name, "inin"), Token()});
TEST_CASE(Operator, Adjacent, 245, "outout", {Token(Name, "outout"), Token()});
TEST_CASE(Operator, Adjacent, 246, "sizeofsizeof", {Token(Name, "sizeofsizeof"), Token()});
TEST_CASE(Operator, Adjacent, 247, "bitsizeofbitsizeof", {Token(Name, "bitsizeofbitsizeof"), Token()});
TEST_CASE(Operator, Adjacent, 248, "alignofalignof", {Token(Name, "alignofalignof"), Token()});
TEST_CASE(Operator, Adjacent, 249, "typeoftypeof", {Token(Name, "typeoftypeof"), Token()});
TEST_CASE(Operator, Adjacent, 250, "comptimecomptime", {Token(Name, "comptimecomptime"), Token()});
TEST_CASE(Operator, Adjacent, 251, "..", {OpRange, Token()});
TEST_CASE(Operator, Adjacent, 252, "....", {OpEllipsis, OpDot, Token()});
TEST_CASE(Operator, Adjacent, 253, "......", {OpEllipsis, OpEllipsis, Token()});
TEST_CASE(Operator, Adjacent, 254, "=>=>", {OpArrow, OpArrow, Token()});
TEST_CASE(Operator, Adjacent, 255, "??", {OpTernary, OpTernary, Token()});

///============================================================================///
/// OPERATOR PERMUTATIONS
TEST_CASE(Operator, Permute, 0, R"(.->*=)", {OpDot, OpMinus, OpGT, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 1, R"(&>>>=<=..)", {OpBitAnd, OpROTRSet, OpLE, OpRange, Token()});
TEST_CASE(Operator, Permute, 2, R"(=/&&<<=)", {OpSet, OpSlash, OpLogicAnd, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 3, R"(<<<=/<<<..)", {OpROTLSet, OpSlash, OpROTL, OpRange, Token()});
TEST_CASE(Operator, Permute, 4, R"(>>=|=><<=)", {OpRShiftSet, OpBitOrSet, OpGT, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 5, R"(&&>>>..%)", {OpLogicAnd, OpROTR, OpRange, OpPercent, Token()});
TEST_CASE(Operator, Permute, 6, R"(|<<%==)", {OpBitOr, OpLShift, OpPercentSet, OpSet, Token()});
TEST_CASE(Operator, Permute, 7, R"(^^=<<<=.<<<)", {OpLogicXorSet, OpROTLSet, OpDot, OpROTL, Token()});
TEST_CASE(Operator, Permute, 8, R"(>=&&=^^--)", {OpGE, OpLogicAndSet, OpLogicXor, OpDec, Token()});
TEST_CASE(Operator, Permute, 9, R"(<<|=^^=)", {OpLShift, OpBitOrSet, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 10, R"(||=/^^=!=)", {OpLogicOrSet, OpSlash, OpLogicXorSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 11, R"(>=.....&&=)", {OpGE, OpEllipsis, OpRange, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 12, R"(|>>=<=>=)", {OpBitOr, OpRShiftSet, OpLE, OpGE, Token()});
TEST_CASE(Operator, Permute, 13, R"(<<=*|++)", {OpLShiftSet, OpTimes, OpBitOr, OpInc, Token()});
TEST_CASE(Operator, Permute, 14, R"(++<<^^~)", {OpInc, OpLShift, OpLogicXor, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 15, R"(<<<&&!=*=)", {OpROTL, OpLogicAnd, OpNE, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 16, R"(^!===%=)", {OpBitXor, OpNE, OpEq, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 17, R"(^>=<<=?)", {OpBitXor, OpGE, OpLShiftSet, OpTernary, Token()});
TEST_CASE(Operator, Permute, 18, R"(.<<^=)", {OpDot, OpLShift, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 19, R"(^^?-!=)", {OpLogicXor, OpTernary, OpMinus, OpNE, Token()});
TEST_CASE(Operator, Permute, 20, R"(*!=--/)", {OpTimes, OpNE, OpDec, OpSlash, Token()});
TEST_CASE(Operator, Permute, 21, R"(<>^^=<<<=)", {OpLT, OpGT, OpLogicXorSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 22, R"(/...^^<<=)", {OpSlash, OpEllipsis, OpLogicXor, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 23, R"(^^=-<<<&&)", {OpLogicXorSet, OpMinus, OpROTL, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 24, R"(||=^=<<<<)", {OpLogicOrSet, OpBitXorSet, OpROTL, OpLT, Token()});
TEST_CASE(Operator, Permute, 25, R"(-!=<<=>>>)", {OpMinus, OpNE, OpLShiftSet, OpROTR, Token()});
TEST_CASE(Operator, Permute, 26, R"(..%=&=*=)", {OpRange, OpPercentSet, OpBitAndSet, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 27, R"(|^^=&||=)", {OpBitOr, OpLogicXorSet, OpBitAnd, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 28, R"(!=*=~=)", {OpNE, OpTimesSet, OpBitNot, OpSet, Token()});
TEST_CASE(Operator, Permute, 29, R"(^..!~)", {OpBitXor, OpRange, OpLogicNot, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 30, R"(..+%=<<)", {OpRange, OpPlus, OpPercentSet, OpLShift, Token()});
TEST_CASE(Operator, Permute, 31, R"(!./=|=)", {OpLogicNot, OpDot, OpSlashSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 32, R"(||=+=<<|)", {OpLogicOrSet, OpPlusSet, OpLShift, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 33, R"(++-=<<=>)", {OpInc, OpMinusSet, OpLShiftSet, OpGT, Token()});
TEST_CASE(Operator, Permute, 34, R"(^^=...%=-=)", {OpLogicXorSet, OpEllipsis, OpPercentSet, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 35, R"(||...^&)", {OpLogicOr, OpEllipsis, OpBitXor, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 36, R"(^>>--?)", {OpBitXor, OpRShift, OpDec, OpTernary, Token()});
TEST_CASE(Operator, Permute, 37, R"(...>=-=/=)", {OpEllipsis, OpGE, OpMinusSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 38, R"(|>=<<%)", {OpBitOr, OpGE, OpLShift, OpPercent, Token()});
TEST_CASE(Operator, Permute, 39, R"(*=./>=)", {OpTimesSet, OpDot, OpSlash, OpGE, Token()});
TEST_CASE(Operator, Permute, 40, R"(!=<<<*>=)", {OpNE, OpROTL, OpTimes, OpGE, Token()});
TEST_CASE(Operator, Permute, 41, R"(...&+=^)", {OpEllipsis, OpBitAnd, OpPlusSet, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 42, R"(...&^<<)", {OpEllipsis, OpBitAnd, OpBitXor, OpLShift, Token()});
TEST_CASE(Operator, Permute, 43, R"(%&&&&=<=)", {OpPercent, OpLogicAnd, OpLogicAndSet, OpLE, Token()});
TEST_CASE(Operator, Permute, 44, R"(>>>=<<<-=||)", {OpROTRSet, OpROTL, OpMinusSet, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 45, R"(>>=<==<<<=)", {OpRShiftSet, OpLE, OpSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 46, R"(>>=<=*>>)", {OpRShiftSet, OpLE, OpTimes, OpRShift, Token()});
TEST_CASE(Operator, Permute, 47, R"(<^^=|&)", {OpLT, OpLogicXorSet, OpBitOr, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 48, R"(...>>>=++)", {OpEllipsis, OpROTRSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 49, R"(>>=>=<<<<)", {OpRShiftSet, OpGE, OpROTL, OpLT, Token()});
TEST_CASE(Operator, Permute, 50, R"(/==++=)", {OpSlashSet, OpSet, OpInc, OpSet, Token()});
TEST_CASE(Operator, Permute, 51, R"(>>=<=~>)", {OpRShiftSet, OpLE, Token(Note, ""), Token()});
TEST_CASE(Operator, Permute, 52, R"(||=<<<!=)", {OpLogicOrSet, OpROTL, OpNE, Token()});
TEST_CASE(Operator, Permute, 53, R"(>=~>>&)", {OpGE, Token(Note, ">&"), Token()});
TEST_CASE(Operator, Permute, 54, R"(<>|=.)", {OpLT, OpGT, OpBitOrSet, OpDot, Token()});
TEST_CASE(Operator, Permute, 55, R"(^=&<|=)", {OpBitXorSet, OpBitAnd, OpLT, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 56, R"(&&=...<)", {OpLogicAndSet, OpEllipsis, OpLT, Token()});
TEST_CASE(Operator, Permute, 57, R"(=?^=++)", {OpSet, OpTernary, OpBitXorSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 58, R"(&=+<=>>)", {OpBitAndSet, OpPlus, OpLE, OpRShift, Token()});
TEST_CASE(Operator, Permute, 59, R"(.~<<<|=)", {OpDot, OpBitNot, OpROTL, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 60, R"(/>=&=|)", {OpSlash, OpGE, OpBitAndSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 61, R"(*<=^--)", {OpTimes, OpLE, OpBitXor, OpDec, Token()});
TEST_CASE(Operator, Permute, 62, R"(|||=-=)", {OpLogicOr, OpBitOrSet, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 63, R"(==>>=||=<<<=)", {OpEq, OpRShiftSet, OpLogicOrSet, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 64, R"(<<++>=|=)", {OpLShift, OpInc, OpGE, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 65, R"(+--!-)", {OpPlus, OpDec, OpLogicNot, OpMinus, Token()});
TEST_CASE(Operator, Permute, 66, R"(?...&=++)", {OpTernary, OpEllipsis, OpBitAndSet, OpInc, Token()});
TEST_CASE(Operator, Permute, 67, R"(<<<%-=>=)", {OpROTL, OpPercent, OpMinusSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 68, R"(-=--...&&=)", {OpMinusSet, OpDec, OpEllipsis, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 69, R"(||=>=<=...)", {OpLogicOrSet, OpGE, OpLE, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 70, R"(.=>>=>>>=)", {OpDot, OpArrow, OpGE, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 71, R"(+===&&=^)", {OpPlusSet, OpEq, OpLogicAndSet, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 72, R"(^=--&&=+=)", {OpBitXorSet, OpDec, OpLogicAndSet, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 73, R"(==%..*=)", {OpEq, OpPercent, OpRange, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 74, R"(-=&&=^^)", {OpMinusSet, OpLogicAndSet, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 75, R"(>>>=>>=../)", {OpROTRSet, OpRShiftSet, OpRange, OpSlash, Token()});
TEST_CASE(Operator, Permute, 76, R"(-=&&^^=...)", {OpMinusSet, OpLogicAnd, OpLogicXorSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 77, R"(++?^^>>>)", {OpInc, OpTernary, OpLogicXor, OpROTR, Token()});
TEST_CASE(Operator, Permute, 78, R"(%^^=&&^=)", {OpPercent, OpLogicXorSet, OpLogicAnd, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 79, R"(>=..>-)", {OpGE, OpRange, OpGT, OpMinus, Token()});
TEST_CASE(Operator, Permute, 80, R"(>>=%=/===)", {OpRShiftSet, OpPercentSet, OpSlashSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 81, R"(<<<=.==^=)", {OpROTLSet, OpDot, OpEq, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 82, R"(>|=^^=~)", {OpGT, OpBitOrSet, OpLogicXorSet, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 83, R"(>>>><<..)", {OpROTR, OpGT, OpLShift, OpRange, Token()});
TEST_CASE(Operator, Permute, 84, R"(...=+==>)", {OpEllipsis, OpSet, OpPlusSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 85, R"(&=---/)", {OpBitAndSet, OpDec, OpMinus, OpSlash, Token()});
TEST_CASE(Operator, Permute, 86, R"(+|++!)", {OpPlus, OpBitOr, OpInc, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 87, R"(!&&=<<<=&&)", {OpLogicNot, OpLogicAndSet, OpROTLSet, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 88, R"(<=&&=<<<<<)", {OpLE, OpLogicAndSet, OpROTL, OpLShift, Token()});
TEST_CASE(Operator, Permute, 89, R"(^--^^=>>)", {OpBitXor, OpDec, OpLogicXorSet, OpRShift, Token()});
TEST_CASE(Operator, Permute, 90, R"(--^<=<<)", {OpDec, OpBitXor, OpLE, OpLShift, Token()});
TEST_CASE(Operator, Permute, 91, R"(>>>=-=+=>>)", {OpROTRSet, OpMinusSet, OpPlusSet, OpRShift, Token()});
TEST_CASE(Operator, Permute, 92, R"(*--!<)", {OpTimes, OpDec, OpLogicNot, OpLT, Token()});
TEST_CASE(Operator, Permute, 93, R"(<&->>=)", {OpLT, OpBitAnd, OpMinus, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 94, R"(&/===^^=)", {OpBitAnd, OpSlashSet, OpEq, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 95, R"(>=>>=?>>>=)", {OpGE, OpRShiftSet, OpTernary, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 96, R"(<||<<-)", {OpLT, OpLogicOr, OpLShift, OpMinus, Token()});
TEST_CASE(Operator, Permute, 97, R"(+=^^<=/)", {OpPlusSet, OpLogicXor, OpLE, OpSlash, Token()});
TEST_CASE(Operator, Permute, 98, R"(|=>&=~)", {OpBitOrSet, OpGT, OpBitAndSet, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 99, R"(>>||&&=%)", {OpRShift, OpLogicOr, OpLogicAndSet, OpPercent, Token()});
TEST_CASE(Operator, Permute, 100, R"(>>>-=^^^^=)", {OpROTR, OpMinusSet, OpLogicXor, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 101, R"(||=!/=>=)", {OpLogicOrSet, OpLogicNot, OpSlashSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 102, R"(||=>=?--)", {OpLogicOrSet, OpGE, OpTernary, OpDec, Token()});
TEST_CASE(Operator, Permute, 103, R"(!&==>>>)", {OpLogicNot, OpBitAndSet, OpArrow, OpRShift, Token()});
TEST_CASE(Operator, Permute, 104, R"(*&=<=<<<)", {OpTimes, OpBitAndSet, OpLE, OpROTL, Token()});
TEST_CASE(Operator, Permute, 105, R"(%->>>=*=)", {OpPercent, OpMinus, OpROTRSet, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 106, R"(>>|=%===)", {OpRShift, OpBitOrSet, OpPercentSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 107, R"(=<<=+=>>>=)", {OpSet, OpLShiftSet, OpPlusSet, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 108, R"(/<<=<<^=)", {OpSlash, OpLShiftSet, OpLShift, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 109, R"(-=*!~)", {OpMinusSet, OpTimes, OpLogicNot, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 110, R"(^=...%=>>=)", {OpBitXorSet, OpEllipsis, OpPercentSet, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 111, R"(%!=+=|)", {OpPercent, OpNE, OpPlusSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 112, R"(>>>!=>>=/=)", {OpROTR, OpNE, OpRShiftSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 113, R"(++||=&&...)", {OpInc, OpLogicOrSet, OpLogicAnd, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 114, R"(-&--/=)", {OpMinus, OpBitAnd, OpDec, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 115, R"(<<=-=++^^)", {OpLShiftSet, OpMinusSet, OpInc, OpLogicXor, Token()});
TEST_CASE(Operator, Permute, 116, R"(>^=&==)", {OpGT, OpBitXorSet, OpBitAndSet, OpSet, Token()});
TEST_CASE(Operator, Permute, 117, R"(-!&...)", {OpMinus, OpLogicNot, OpBitAnd, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 118, R"(^^...|<<<=)", {OpLogicXor, OpEllipsis, OpBitOr, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 119, R"(<>..&&)", {OpLT, OpGT, OpRange, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 120, R"(!=>>>=>>>=>)", {OpNE, OpROTRSet, OpROTRSet, OpGT, Token()});
TEST_CASE(Operator, Permute, 121, R"(&&<<^=>>=)", {OpLogicAnd, OpLShift, OpBitXorSet, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 122, R"(||&&||==>)", {OpLogicOr, OpLogicAnd, OpLogicOrSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 123, R"(+>>>&|)", {OpPlus, OpROTR, OpBitAnd, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 124, R"(!=>..||)", {OpNE, OpGT, OpRange, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 125, R"(||=>>>?)", {OpLogicOrSet, OpROTR, OpTernary, Token()});
TEST_CASE(Operator, Permute, 126, R"(&=>>-=>)", {OpBitAndSet, OpRShift, OpMinusSet, OpGT, Token()});
TEST_CASE(Operator, Permute, 127, R"(||=^^>=<<)", {OpLogicOrSet, OpLogicXor, OpGE, OpLShift, Token()});
TEST_CASE(Operator, Permute, 128, R"(++<<<=>?)", {OpInc, OpROTLSet, OpGT, OpTernary, Token()});
TEST_CASE(Operator, Permute, 129, R"(=&..%)", {OpSet, OpBitAnd, OpRange, OpPercent, Token()});
TEST_CASE(Operator, Permute, 130, R"(<<^^--*)", {OpLShift, OpLogicXor, OpDec, OpTimes, Token()});
TEST_CASE(Operator, Permute, 131, R"(~...>>>=>)", {OpBitNot, OpEllipsis, OpROTRSet, OpGT, Token()});
TEST_CASE(Operator, Permute, 132, R"(==<<<=|++)", {OpEq, OpROTLSet, OpBitOr, OpInc, Token()});
TEST_CASE(Operator, Permute, 133, R"(>>>=>>=!/)", {OpROTRSet, OpRShiftSet, OpLogicNot, OpSlash, Token()});
TEST_CASE(Operator, Permute, 134, R"(&&=|||=%=)", {OpLogicAndSet, OpLogicOr, OpBitOrSet, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 135, R"(+=*=^|)", {OpPlusSet, OpTimesSet, OpBitXor, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 136, R"(>>>=<<>>>!)", {OpROTRSet, OpLShift, OpROTR, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 137, R"(..--<!=)", {OpRange, OpDec, OpLT, OpNE, Token()});
TEST_CASE(Operator, Permute, 138, R"(||->=--)", {OpLogicOr, OpMinus, OpGE, OpDec, Token()});
TEST_CASE(Operator, Permute, 139, R"(|=*=^===)", {OpBitOrSet, OpTimesSet, OpBitXorSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 140, R"(+~<<<>=)", {OpPlus, OpBitNot, OpROTL, OpGE, Token()});
TEST_CASE(Operator, Permute, 141, R"(<<<>>=^^=-)", {OpROTL, OpRShiftSet, OpLogicXorSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 142, R"(%=^^=...>>)", {OpPercentSet, OpLogicXorSet, OpEllipsis, OpRShift, Token()});
TEST_CASE(Operator, Permute, 143, R"(%>>>^=|=)", {OpPercent, OpROTR, OpBitXorSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 144, R"(++||=||*)", {OpInc, OpLogicOrSet, OpLogicOr, OpTimes, Token()});
TEST_CASE(Operator, Permute, 145, R"(&&|=>>>^)", {OpLogicAnd, OpBitOrSet, OpROTR, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 146, R"(...++%=~)", {OpEllipsis, OpInc, OpPercentSet, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 147, R"(||=>==>>=)", {OpLogicOrSet, OpGE, OpArrow, OpGE, Token()});
TEST_CASE(Operator, Permute, 148, R"(~<=>>>=)", {OpBitNot, OpLE, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 149, R"(-<<<=&<<=)", {OpMinus, OpROTLSet, OpBitAnd, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 150, R"(-!=%=)", {OpMinus, OpNE, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 151, R"(<<<=>==>)", {OpROTLSet, OpGE, OpArrow, Token()});
TEST_CASE(Operator, Permute, 152, R"(^<=^^=...)", {OpBitXor, OpLE, OpLogicXorSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 153, R"(^<~&&=)", {OpBitXor, OpLT, OpBitNot, OpLogicAndSet, Token()});
TEST_CASE(Operator, Permute, 154, R"(&&=?~/=)", {OpLogicAndSet, OpTernary, OpBitNot, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 155, R"(%=>>!=>)", {OpPercentSet, OpRShift, OpNE, OpGT, Token()});
TEST_CASE(Operator, Permute, 156, R"(<<==>=>>>)", {OpLShiftSet, OpArrow, OpArrow, OpRShift, Token()});
TEST_CASE(Operator, Permute, 157, R"(<<<=&>>>=/)", {OpROTLSet, OpBitAnd, OpROTRSet, OpSlash, Token()});
TEST_CASE(Operator, Permute, 158, R"(=>/=*=>=)", {OpArrow, OpSlashSet, OpTimesSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 159, R"(||?.&)", {OpLogicOr, OpTernary, OpDot, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 160, R"(<<<=~...%)", {OpROTLSet, OpBitNot, OpEllipsis, OpPercent, Token()});
TEST_CASE(Operator, Permute, 161, R"(>>=>%<<<)", {OpRShiftSet, OpGT, OpPercent, OpROTL, Token()});
TEST_CASE(Operator, Permute, 162, R"(>...+=-)", {OpGT, OpEllipsis, OpPlusSet, OpMinus, Token()});
TEST_CASE(Operator, Permute, 163, R"(%=++<*=)", {OpPercentSet, OpInc, OpLT, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 164, R"(/>=>>===)", {OpSlash, OpGE, OpRShiftSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 165, R"(&&/|=?)", {OpLogicAnd, OpSlash, OpBitOrSet, OpTernary, Token()});
TEST_CASE(Operator, Permute, 166, R"(>>>^^-=>)", {OpROTR, OpLogicXor, OpMinusSet, OpGT, Token()});
TEST_CASE(Operator, Permute, 167, R"(-=<<=+=%=)", {OpMinusSet, OpLShiftSet, OpPlusSet, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 168, R"(<||!==)", {OpLT, OpLogicOr, OpNE, OpSet, Token()});
TEST_CASE(Operator, Permute, 169, R"(>>=^=++*=)", {OpRShiftSet, OpBitXorSet, OpInc, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 170, R"(*=<<=++...)", {OpTimesSet, OpLShiftSet, OpInc, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 171, R"(<=><<<=!=)", {OpLE, OpGT, OpROTLSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 172, R"(^^=||=-->>>)", {OpLogicXorSet, OpLogicOrSet, OpDec, OpROTR, Token()});
TEST_CASE(Operator, Permute, 173, R"(...*+=<<=)", {OpEllipsis, OpTimes, OpPlusSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 174, R"(>>>=>>==^^=)", {OpROTRSet, OpRShiftSet, OpSet, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 175, R"(<<=&&^^=?)", {OpLShiftSet, OpLogicAnd, OpLogicXorSet, OpTernary, Token()});
TEST_CASE(Operator, Permute, 176, R"(*/=%)", {OpTimes, OpSlashSet, OpPercent, Token()});
TEST_CASE(Operator, Permute, 177, R"(&&+=^^~)", {OpLogicAnd, OpPlusSet, OpLogicXor, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 178, R"(--=<=/)", {OpDec, OpSet, OpLE, OpSlash, Token()});
TEST_CASE(Operator, Permute, 179, R"(<<--&&%=)", {OpLShift, OpDec, OpLogicAnd, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 180, R"(*?^^=>>>=)", {OpTimes, OpTernary, OpLogicXorSet, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 181, R"(^^=*=*||=)", {OpLogicXorSet, OpTimesSet, OpTimes, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 182, R"(=>|*-=)", {OpArrow, OpBitOr, OpTimes, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 183, R"(+!=...^^=)", {OpPlus, OpNE, OpEllipsis, OpLogicXorSet, Token()});
TEST_CASE(Operator, Permute, 184, R"(!=>=++<)", {OpNE, OpGE, OpInc, OpLT, Token()});
TEST_CASE(Operator, Permute, 185, R"(|<<<=&&==>)", {OpBitOr, OpROTLSet, OpLogicAndSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 186, R"(^^=>>>./=)", {OpLogicXorSet, OpROTR, OpDot, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 187, R"(..<=/-)", {OpRange, OpLE, OpSlash, OpMinus, Token()});
TEST_CASE(Operator, Permute, 188, R"(+=&=<)", {OpPlusSet, OpBitAndSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 189, R"(<<%=~|)", {OpLShift, OpPercentSet, OpBitNot, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 190, R"(<<=&&=.*=)", {OpLShiftSet, OpLogicAndSet, OpDot, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 191, R"(!/>><)", {OpLogicNot, OpSlash, OpRShift, OpLT, Token()});
TEST_CASE(Operator, Permute, 192, R"(^>>>>>...)", {OpBitXor, OpROTR, OpRShift, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 193, R"(--|=%%=)", {OpDec, OpBitOrSet, OpPercent, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 194, R"(^=..>>=>>>)", {OpBitXorSet, OpRange, OpRShiftSet, OpROTR, Token()});
TEST_CASE(Operator, Permute, 195, R"(%=.!=+=)", {OpPercentSet, OpDot, OpNE, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 196, R"(<<<=&&===>=)", {OpROTLSet, OpLogicAndSet, OpEq, OpGE, Token()});
TEST_CASE(Operator, Permute, 197, R"(-=<<<=<<=)", {OpMinusSet, OpROTLSet, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 198, R"(*>>?<)", {OpTimes, OpRShift, OpTernary, OpLT, Token()});
TEST_CASE(Operator, Permute, 199, R"(>>>|!=<<<)", {OpROTR, OpBitOr, OpNE, OpROTL, Token()});
TEST_CASE(Operator, Permute, 200, R"(<<=^=/=||)", {OpLShiftSet, OpBitXorSet, OpSlashSet, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 201, R"(*^=>>!=)", {OpTimes, OpBitXorSet, OpRShift, OpNE, Token()});
TEST_CASE(Operator, Permute, 202, R"(+=%=>>>>)", {OpPlusSet, OpPercentSet, OpROTR, OpGT, Token()});
TEST_CASE(Operator, Permute, 203, R"(+=%<<<=/)", {OpPlusSet, OpPercent, OpROTLSet, OpSlash, Token()});
TEST_CASE(Operator, Permute, 204, R"(&=<<^^=|=)", {OpBitAndSet, OpLShift, OpLogicXorSet, OpBitOrSet, Token()});
TEST_CASE(Operator, Permute, 205, R"(%=...*>=)", {OpPercentSet, OpEllipsis, OpTimes, OpGE, Token()});
TEST_CASE(Operator, Permute, 206, R"(+=<=..=)", {OpPlusSet, OpLE, OpRange, OpSet, Token()});
TEST_CASE(Operator, Permute, 207, R"(..?|&&)", {OpRange, OpTernary, OpBitOr, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 208, R"(>>>=...?>)", {OpROTRSet, OpEllipsis, OpTernary, OpGT, Token()});
TEST_CASE(Operator, Permute, 209, R"(...>-<<<)", {OpEllipsis, OpGT, OpMinus, OpROTL, Token()});
TEST_CASE(Operator, Permute, 210, R"(<<<=||+!=)", {OpROTLSet, OpLogicOr, OpPlus, OpNE, Token()});
TEST_CASE(Operator, Permute, 211, R"(>>><<<&=*=)", {OpROTR, OpROTL, OpBitAndSet, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 212, R"(++|=...)", {OpInc, OpBitOrSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 213, R"(...^*>)", {OpEllipsis, OpBitXor, OpTimes, OpGT, Token()});
TEST_CASE(Operator, Permute, 214, R"(%==.*)", {OpPercentSet, OpSet, OpDot, OpTimes, Token()});
TEST_CASE(Operator, Permute, 215, R"(^^/=<<<!)", {OpLogicXor, OpSlashSet, OpROTL, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 216, R"(?<&=^)", {OpTernary, OpLT, OpBitAndSet, OpBitXor, Token()});
TEST_CASE(Operator, Permute, 217, R"(>>>=&&=!=&&)", {OpROTRSet, OpLogicAndSet, OpNE, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 218, R"(>>=^>>+=)", {OpRShiftSet, OpBitXor, OpRShift, OpPlusSet, Token()});
TEST_CASE(Operator, Permute, 219, R"(>>>=^=<<<===)", {OpROTRSet, OpBitXorSet, OpROTLSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 220, R"(*=...>=>)", {OpTimesSet, OpEllipsis, OpGE, OpGT, Token()});
TEST_CASE(Operator, Permute, 221, R"(+=-=...==)", {OpPlusSet, OpMinusSet, OpEllipsis, OpEq, Token()});
TEST_CASE(Operator, Permute, 222, R"(=>^^!=/=)", {OpArrow, OpLogicXor, OpNE, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 223, R"(|--===)", {OpBitOr, OpDec, OpEq, OpSet, Token()});
TEST_CASE(Operator, Permute, 224, R"(~^^=<=&)", {OpBitNot, OpLogicXorSet, OpLE, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 225, R"(<<<|..?)", {OpROTL, OpBitOr, OpRange, OpTernary, Token()});
TEST_CASE(Operator, Permute, 226, R"(|<=<<>=)", {OpBitOr, OpLE, OpLShift, OpGE, Token()});
TEST_CASE(Operator, Permute, 227, R"(/^^&===)", {OpSlash, OpLogicXor, OpBitAndSet, OpEq, Token()});
TEST_CASE(Operator, Permute, 228, R"(&/=^^=<=)", {OpBitAnd, OpSlashSet, OpLogicXorSet, OpLE, Token()});
TEST_CASE(Operator, Permute, 229, R"(...<<--&&)", {OpEllipsis, OpLShift, OpDec, OpLogicAnd, Token()});
TEST_CASE(Operator, Permute, 230, R"(||=<<<=>>==>)", {OpLogicOrSet, OpROTLSet, OpRShiftSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 231, R"(-^*=<)", {OpMinus, OpBitXor, OpTimesSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 232, R"(%...^^=.)", {OpPercent, OpEllipsis, OpLogicXorSet, OpDot, Token()});
TEST_CASE(Operator, Permute, 233, R"(&=||=/=)", {OpBitAndSet, OpLogicOrSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 234, R"(>=^<=<<<)", {OpGE, OpBitXor, OpLE, OpROTL, Token()});
TEST_CASE(Operator, Permute, 235, R"(&&^^=&&=%=)", {OpLogicAnd, OpLogicXorSet, OpLogicAndSet, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 236, R"(<<</=-%)", {OpROTL, OpSlashSet, OpMinus, OpPercent, Token()});
TEST_CASE(Operator, Permute, 237, R"(&&<<=++!)", {OpLogicAnd, OpLShiftSet, OpInc, OpLogicNot, Token()});
TEST_CASE(Operator, Permute, 238, R"(&&-=/=>=)", {OpLogicAnd, OpMinusSet, OpSlashSet, OpGE, Token()});
TEST_CASE(Operator, Permute, 239, R"(^>>>-->>=)", {OpBitXor, OpROTR, OpDec, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 240, R"(>%<-=)", {OpGT, OpPercent, OpLT, OpMinusSet, Token()});
TEST_CASE(Operator, Permute, 241, R"(||...>>^=)", {OpLogicOr, OpEllipsis, OpRShift, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 242, R"(++!=&&=--)", {OpInc, OpNE, OpLogicAndSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 243, R"(>>>==&&||=)", {OpROTRSet, OpSet, OpLogicAnd, OpLogicOrSet, Token()});
TEST_CASE(Operator, Permute, 244, R"(<<=&=.>>=)", {OpLShiftSet, OpBitAndSet, OpDot, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 245, R"(==&/*)", {OpEq, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 246, R"(+--^^=*)", {OpPlus, OpDec, OpLogicXorSet, OpTimes, Token()});
TEST_CASE(Operator, Permute, 247, R"(!...>>>=--)", {OpLogicNot, OpEllipsis, OpROTRSet, OpDec, Token()});
TEST_CASE(Operator, Permute, 248, R"(||=>>>=>><=)", {OpLogicOrSet, OpROTRSet, OpRShift, OpLE, Token()});
TEST_CASE(Operator, Permute, 249, R"(==--*+)", {OpEq, OpDec, OpTimes, OpPlus, Token()});
TEST_CASE(Operator, Permute, 250, R"(>=--%<<<=)", {OpGE, OpDec, OpPercent, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 251, R"(~+=||=<<<)", {OpBitNot, OpPlusSet, OpLogicOrSet, OpROTL, Token()});
TEST_CASE(Operator, Permute, 252, R"(-!...<<=)", {OpMinus, OpLogicNot, OpEllipsis, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 253, R"(-->*=&)", {OpDec, OpGT, OpTimesSet, OpBitAnd, Token()});
TEST_CASE(Operator, Permute, 254, R"(||=<<=>>>==)", {OpLogicOrSet, OpLShiftSet, OpROTRSet, OpSet, Token()});
TEST_CASE(Operator, Permute, 255, R"(=/>>>>>>=)", {OpSet, OpSlash, OpROTR, OpROTRSet, Token()});
TEST_CASE(Operator, Permute, 256, R"(||<=<<<--)", {OpLogicOr, OpLE, OpROTL, OpDec, Token()});
TEST_CASE(Operator, Permute, 257, R"(--=>=>>>)", {OpDec, OpArrow, OpArrow, OpRShift, Token()});
TEST_CASE(Operator, Permute, 258, R"(<-&--)", {OpLT, OpMinus, OpBitAnd, OpDec, Token()});
TEST_CASE(Operator, Permute, 259, R"(|=*<<=|)", {OpBitOrSet, OpTimes, OpLShiftSet, OpBitOr, Token()});
TEST_CASE(Operator, Permute, 260, R"(>>-<<<^=)", {OpRShift, OpMinus, OpROTL, OpBitXorSet, Token()});
TEST_CASE(Operator, Permute, 261, R"(>>=%=<<<=+)", {OpRShiftSet, OpPercentSet, OpROTLSet, OpPlus, Token()});
TEST_CASE(Operator, Permute, 262, R"(%~/=*)", {OpPercent, OpBitNot, OpSlashSet, OpTimes, Token()});
TEST_CASE(Operator, Permute, 263, R"(*><<<<)", {OpTimes, OpGT, OpROTL, OpLT, Token()});
TEST_CASE(Operator, Permute, 264, R"(^=...+*=)", {OpBitXorSet, OpEllipsis, OpPlus, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 265, R"(|<<<<||)", {OpBitOr, OpROTL, OpLT, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 266, R"(*===&<<<=)", {OpTimesSet, OpEq, OpBitAnd, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 267, R"(<=||^--)", {OpLE, OpLogicOr, OpBitXor, OpDec, Token()});
TEST_CASE(Operator, Permute, 268, R"(^=>=>>>==>)", {OpBitXorSet, OpGE, OpROTRSet, OpArrow, Token()});
TEST_CASE(Operator, Permute, 269, R"(||=*=^^<<=)", {OpLogicOrSet, OpTimesSet, OpLogicXor, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 270, R"(^..&&%=)", {OpBitXor, OpRange, OpLogicAnd, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 271, R"(>>>====>>=)", {OpROTRSet, OpEq, OpArrow, OpGE, Token()});
TEST_CASE(Operator, Permute, 272, R"(/&&=+=/=)", {OpSlash, OpLogicAndSet, OpPlusSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 273, R"(^=/&&--)", {OpBitXorSet, OpSlash, OpLogicAnd, OpDec, Token()});
TEST_CASE(Operator, Permute, 274, R"(>~&&<<=)", {OpGT, OpBitNot, OpLogicAnd, OpLShiftSet, Token()});
TEST_CASE(Operator, Permute, 275, R"(==<<<<<=...)", {OpEq, OpROTL, OpLShiftSet, OpEllipsis, Token()});
TEST_CASE(Operator, Permute, 276, R"(*!=%=*=)", {OpTimes, OpNE, OpPercentSet, OpTimesSet, Token()});
TEST_CASE(Operator, Permute, 277, R"(%=^=<<<=>)", {OpPercentSet, OpBitXorSet, OpROTLSet, OpGT, Token()});
TEST_CASE(Operator, Permute, 278, R"(>>&=<~)", {OpRShift, OpBitAndSet, OpLT, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 279, R"(<<=!||=/=)", {OpLShiftSet, OpLogicNot, OpLogicOrSet, OpSlashSet, Token()});
TEST_CASE(Operator, Permute, 280, R"(+=>=>>>||)", {OpPlusSet, OpGE, OpROTR, OpLogicOr, Token()});
TEST_CASE(Operator, Permute, 281, R"(...<=<<&=)", {OpEllipsis, OpLE, OpLShift, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 282, R"(+&&|=!=)", {OpPlus, OpLogicAnd, OpBitOrSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 283, R"(&&>><~)", {OpLogicAnd, OpRShift, OpLT, OpBitNot, Token()});
TEST_CASE(Operator, Permute, 284, R"(>>>^=|=&=)", {OpROTR, OpBitXorSet, OpBitOrSet, OpBitAndSet, Token()});
TEST_CASE(Operator, Permute, 285, R"(++>>>=|/)", {OpInc, OpROTRSet, OpBitOr, OpSlash, Token()});
TEST_CASE(Operator, Permute, 286, R"(<<<<-<<<=)", {OpROTL, OpLT, OpMinus, OpROTLSet, Token()});
TEST_CASE(Operator, Permute, 287, R"(^=^^=&&<<<)", {OpBitXorSet, OpLogicXorSet, OpLogicAnd, OpROTL, Token()});
TEST_CASE(Operator, Permute, 288, R"(<<=<<<%=+)", {OpLShiftSet, OpROTL, OpPercentSet, OpPlus, Token()});
TEST_CASE(Operator, Permute, 289, R"(^^<</++)", {OpLogicXor, OpLShift, OpSlash, OpInc, Token()});
TEST_CASE(Operator, Permute, 290, R"(<<<^&*)", {OpROTL, OpBitXor, OpBitAnd, OpTimes, Token()});
TEST_CASE(Operator, Permute, 291, R"(&&=^&=%)", {OpLogicAndSet, OpBitXor, OpBitAndSet, OpPercent, Token()});
TEST_CASE(Operator, Permute, 292, R"(-+=/++)", {OpMinus, OpPlusSet, OpSlash, OpInc, Token()});
TEST_CASE(Operator, Permute, 293, R"(..&=<<%=)", {OpRange, OpBitAndSet, OpLShift, OpPercentSet, Token()});
TEST_CASE(Operator, Permute, 294, R"(^<<<=>>=)", {OpBitXor, OpROTLSet, OpRShiftSet, Token()});
TEST_CASE(Operator, Permute, 295, R"(.<>>>=%)", {OpDot, OpLT, OpROTRSet, OpPercent, Token()});
TEST_CASE(Operator, Permute, 296, R"(!=<<=...*)", {OpNE, OpLShiftSet, OpEllipsis, OpTimes, Token()});
TEST_CASE(Operator, Permute, 297, R"(===>>=--)", {OpEq, OpArrow, OpGE, OpDec, Token()});
TEST_CASE(Operator, Permute, 298, R"(^^=<=>>>=!=)", {OpLogicXorSet, OpLE, OpROTRSet, OpNE, Token()});
TEST_CASE(Operator, Permute, 299, R"(<=<<<||=<)", {OpLE, OpROTL, OpLogicOrSet, OpLT, Token()});
TEST_CASE(Operator, Permute, 300, R"(++&&=-=+=)", {OpInc, OpLogicAndSet, OpMinusSet, OpPlusSet, Token()});
