#include <gtest/gtest.h>

#include <pipeline/libnitrate-lexer/LexicalCase.hh>

using namespace ncc::lex;

TEST_CASE(Operator, Symbol, 0, "+", {OpPlus, Token()});
TEST_CASE(Operator, Symbol, 1, "-", {OpMinus, Token()});
TEST_CASE(Operator, Symbol, 2, "*", {OpTimes, Token()});
TEST_CASE(Operator, Symbol, 3, "/", {OpSlash, Token()});
TEST_CASE(Operator, Symbol, 4, "%", {OpPercent, Token()});
TEST_CASE(Operator, Symbol, 5, "&", {OpBitAnd, Token()});
TEST_CASE(Operator, Symbol, 6, "|", {OpBitOr, Token()});
TEST_CASE(Operator, Symbol, 7, "^", {OpBitXor, Token()});
TEST_CASE(Operator, Symbol, 8, "~", {OpBitNot, Token()});
TEST_CASE(Operator, Symbol, 9, "<<", {OpLShift, Token()});
TEST_CASE(Operator, Symbol, 10, ">>", {OpRShift, Token()});
TEST_CASE(Operator, Symbol, 12, "<<<", {OpROTL, Token()});
TEST_CASE(Operator, Symbol, 13, ">>>", {OpROTR, Token()});
TEST_CASE(Operator, Symbol, 14, "&&", {OpLogicAnd, Token()});
TEST_CASE(Operator, Symbol, 15, "||", {OpLogicOr, Token()});
TEST_CASE(Operator, Symbol, 16, "^^", {OpLogicXor, Token()});
TEST_CASE(Operator, Symbol, 17, "!", {OpLogicNot, Token()});
TEST_CASE(Operator, Symbol, 18, "<", {OpLT, Token()});
TEST_CASE(Operator, Symbol, 19, ">", {OpGT, Token()});
TEST_CASE(Operator, Symbol, 20, "<=", {OpLE, Token()});
TEST_CASE(Operator, Symbol, 21, ">=", {OpGE, Token()});
TEST_CASE(Operator, Symbol, 22, "==", {OpEq, Token()});
TEST_CASE(Operator, Symbol, 23, "!=", {OpNE, Token()});
TEST_CASE(Operator, Symbol, 24, "=", {OpSet, Token()});
TEST_CASE(Operator, Symbol, 25, "+=", {OpPlusSet, Token()});
TEST_CASE(Operator, Symbol, 26, "-=", {OpMinusSet, Token()});
TEST_CASE(Operator, Symbol, 27, "*=", {OpTimesSet, Token()});
TEST_CASE(Operator, Symbol, 28, "/=", {OpSlashSet, Token()});
TEST_CASE(Operator, Symbol, 29, "%=", {OpPercentSet, Token()});
TEST_CASE(Operator, Symbol, 30, "&=", {OpBitAndSet, Token()});
TEST_CASE(Operator, Symbol, 31, "|=", {OpBitOrSet, Token()});
TEST_CASE(Operator, Symbol, 32, "^=", {OpBitXorSet, Token()});
TEST_CASE(Operator, Symbol, 33, "&&=", {OpLogicAndSet, Token()});
TEST_CASE(Operator, Symbol, 34, "||=", {OpLogicOrSet, Token()});
TEST_CASE(Operator, Symbol, 35, "^^=", {OpLogicXorSet, Token()});
TEST_CASE(Operator, Symbol, 36, "<<=", {OpLShiftSet, Token()});
TEST_CASE(Operator, Symbol, 37, ">>=", {OpRShiftSet, Token()});
TEST_CASE(Operator, Symbol, 38, "<<<=", {OpROTLSet, Token()});
TEST_CASE(Operator, Symbol, 39, ">>>=", {OpROTRSet, Token()});
TEST_CASE(Operator, Symbol, 40, "++", {OpInc, Token()});
TEST_CASE(Operator, Symbol, 41, "--", {OpDec, Token()});
TEST_CASE(Operator, Symbol, 42, "as", {OpAs, Token()});
TEST_CASE(Operator, Symbol, 43, "bitcast_as", {OpBitcastAs, Token()});
TEST_CASE(Operator, Symbol, 44, "in", {OpIn, Token()});
TEST_CASE(Operator, Symbol, 45, "out", {OpOut, Token()});
TEST_CASE(Operator, Symbol, 46, "sizeof", {OpSizeof, Token()});
TEST_CASE(Operator, Symbol, 47, "bitsizeof", {OpBitsizeof, Token()});
TEST_CASE(Operator, Symbol, 48, "alignof", {OpAlignof, Token()});
TEST_CASE(Operator, Symbol, 49, "typeof", {OpTypeof, Token()});
TEST_CASE(Operator, Symbol, 50, "comptime", {OpComptime, Token()});
TEST_CASE(Operator, Symbol, 51, ".", {OpDot, Token()});
TEST_CASE(Operator, Symbol, 52, "..", {OpRange, Token()});
TEST_CASE(Operator, Symbol, 53, "...", {OpEllipsis, Token()});
TEST_CASE(Operator, Symbol, 54, "=>", {OpArrow, Token()});
TEST_CASE(Operator, Symbol, 55, "?", {OpTernary, Token()});
