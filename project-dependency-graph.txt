digraph  {
  label = "Dependency graph of the Nitrate Project ecosystem";
  graph [splines=ortho, pad="0.3", nodesep="0.3", ranksep="0.6"];

  node [color=lightblue2, 
        fontname="Ubuntu", 
        shape=box,
        style="filled, rounded"
        ];

  "Nitrate Project" -> "Ecosystem";
  "Nitrate Project" -> "Compiler";
  "Nitrate Project" -> "Project Leaders";

  "Compiler" -> "Project Leaders";

  "Ecosystem" -> "Standard Library";
  "Ecosystem" -> "Third Party Libraries";
  "Third Party Libraries" -> "Standard Library";

  "Third Party Libraries" -> "Open Source";
  "Third Party Libraries" -> "Signed commercial code";
  "Third Party Libraries" -> "Unsigned commercial code";

  "Signed commercial code" -> "Checked Publishers";
  "Unsigned commercial code" -> "Unchecked Publishers";
  "Open Source" -> "Checked Publishers";
  "Open Source" -> "Unchecked Publishers";

  "Standard Library" -> "libstd-bare";
  "Standard Library" -> "libstd-core";
  "Standard Library" -> "libstd-util";
  "Standard Library" -> "Project Leaders";

  "libstd-bare" -> "std::_panic";
  "std::_panic" -> "Platform specific panic handler";
  "std::_panic" -> "std::eprint";
  "std::_panic" -> "std::slice";
  
  "libstd-bare" -> "std::option";
  "std::option" -> "std::_panic";
  
  "libstd-bare" -> "std::slice";
  "std::slice" -> "std::_panic";

  "libstd-bare" -> "std::eprint";
  "std::eprint" -> "Platform specific output handler";
  
  ######################################################

  "libstd-core" -> "std::random";
  "std::random" -> "Platform specific entropy source";
  
  "libstd-core" -> "std::trace";
  "std::trace" -> "std::slice";
  "std::trace" -> "Platform specific stacktrace handler";
  "std::trace" -> "std::panic";

  "libstd-core" -> "std::panic";
  "std::panic" -> "std::_panic";
  "std::panic" -> "std::slice";

  "libstd-core" -> "General math functions";
  "General math functions" -> "std::panic";

  "libstd-core" -> "Global Allocator";
  "Global Allocator" -> "std::panic";
  
  "libstd-core" -> "std::vector";
  "std::vector" -> "std::panic";
  "std::vector" -> "std::slice";
  "std::vector" -> "std::option";

  "libstd-core" -> "std::basic_string";
  "std::basic_string" -> "std::panic";
  "std::basic_string" -> "std::vector";
  "std::basic_string" -> "std::slice";
  "std::basic_string" -> "std::option";

  "libstd-core" -> "std::set";
  "std::set" -> "std::panic";
  "std::set" -> "std::slice";
  "std::set" -> "std::option";

  "libstd-core" -> "std::map";
  "std::map" -> "std::panic";
  "std::map" -> "std::slice";
  "std::map" -> "std::option";

  "libstd-core" -> "std::tube";
  "std::tube" -> "std::slice";
  "std::tube" -> "std::vector";
  "std::tube" -> "std::panic";
  "std::tube" -> "Global Allocator";

  ######################################################

  "libstd-util" -> "std::encode";
  "std::encode" -> "std::panic";
  
  "libstd-util" -> "std::decode";
  "std::decode" -> "std::panic";

  "libstd-util" -> "Key Generation";
  "Key Generation" -> "std::secgen";

  "Key Generation" -> "std::uuid";
  "std::uuid" -> "std::secgen";

  "libstd-util" -> "File IO";
  "File IO" -> "std::open";
  "File IO" -> "std::remove";

  "File IO" -> "std::fetch";
  "std::fetch" -> "std::open";

  "File IO" -> "std::save";
  "std::save" -> "std::open";

}