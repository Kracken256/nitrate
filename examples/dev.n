@(
  n.get_args = function() -- (
    local t = n.peek()
    local args = {}

    if t.ty ~= 'sym' or t.v ~= '(' then
      return args
    end

    n.next()

    local state = 1

    while state ~= 0 do
      t = n.peek()
      
      if t.ty == 'sym' and t.v == ')' then
        n.next()
        break
      else
        -- This is the start of an argument

        local paren_state = 0
        local cur_state = 0
        local brak_state = 0
        local data = ''

        while true do
          t = n.peek()

          if t.ty == 'sym' and t.v == ')' and paren_state == 0 and cur_state == 0 and brak_state == 0 then
            break
          end

          n.next()

          if t.ty == 'sym' and t.v == '(' then
            paren_state = paren_state + 1
          elseif t.ty == 'sym' and t.v == ')' then
            paren_state = paren_state - 1
          elseif t.ty == 'sym' and t.v == '[' then
            brak_state = brak_state + 1
          elseif t.ty == 'sym' and t.v == ']' then
            brak_state = brak_state - 1
          elseif t.ty == 'sym' and t.v == ',' and paren_state == 0 and cur_state == 0 and brak_state == 0 then
            break
          end

          if t.ty == 'key' or t.ty == 'op' or t.ty == 'sym' 
              or t.ty == 'name' or t.ty == 'num' 
              or t.ty == 'int' then
            data = data .. ' ' .. t.v
          elseif t.ty == 'str' or t.ty == 'char' then
            data = data .. ' ' .. n.enstr(t.v)
          elseif t.ty == 'macb' then
            data = data .. ' @(' .. t.v .. ')'
          elseif t.ty == 'macr' then
            data = data .. ' @' .. t.v
          elseif t.ty == 'note' then
            data = data .. ' /*' .. t.v .. '*/'
          end
        end

        table.insert(args, data)
      end
    end

    return args
  end
)

@(fn metamorphic() {
  local args = n.get_args()

  if #args ~= 1 then
    n.abort('metamorphic expects 2 argument')
  end

  local main = args[1]

  -- Do processing

  print(main)

  return main
})

@metamorphic(fn(){})