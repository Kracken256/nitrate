///////////////////////////////////////////////////////////////////////////////
///                                                                         ///
///    ░▒▓██████▓▒░  ░▒▓███████▓▒░  ░▒▓███████▓▒░  ░▒▓█▓▒░ ░▒▓████████▓▒░   ///
///   ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///   ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///   ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓███████▓▒░  ░▒▓███████▓▒░  ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///   ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///   ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///    ░▒▓██████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓███████▓▒░  ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///                                                                         ///
///     * ORBIT STANDARD LIBRARY - The official stdlib for QUIX.            ///
///     * Copyright (c) 2024, Wesley C. Jones.                              ///
///     * License terms may be found in the LICENSE file.                   ///
///                                                                         ///
///////////////////////////////////////////////////////////////////////////////

@use "v1.0"
@language "en"
@copyright "Wesley Jones; MIT license"

@import cstd::cint;

subsystem core::cstd {
    region div_t {
        quot: int,
        rem: int,
    };

    struct ldiv_t {
        quot: long,
        rem: long,
    };

    struct lldiv_t {
        quot: long,
        rem: long,
    };

    import "c"
    {
        fn pure atof(nptr: string): double;
        fn pure atoi(nptr: string): int;
        fn pure atol(nptr: string): long;
        fn pure atoll(nptr: string): long;
        fn pure strtod(nptr: string, endptr: *string): double;
        fn pure strtof(nptr: string, endptr: *string): float;
        fn pure strtol(nptr: string, endptr: *string, base: int): long;
        fn pure strtoll(nptr: string, endptr: *string, base: int): long;
        fn pure strtoul(nptr: string, endptr: *string, base: int): ulong;
        fn pure strtoull(nptr: string, endptr: *string, base: int): ulong;
        fn pure strtold(nptr: string, endptr: *string): double;
        fn noexcept rand(): int;
        fn noexcept srand(seed: uint): void;
        fn noexcept malloc(size: size_t): *void;
        fn noexcept calloc(nmemb: size_t, size: size_t): *void;
        fn noexcept realloc(ptr: *void, size: size_t) : *void;
        fn noexcept free(ptr: *void);
        fn noexcept aligned_alloc(alignment: size_t, size: size_t): *void;
        fn noexcept abort(): null;
        fn noexcept exit(status: int): null;

        type atexit_fn = *fn _();
        fn noexcept atexit(func: atexit_fn): int;
        fn noexcept _Exit(status: int): null;
        fn noexcept getenv(name: string): string;
        fn noexcept system(command: string): int;
        fn pure abs(j: int): int;
        fn pure labs(j: long): long;
        fn pure llabs(j: long): long;
        fn pure div(numer: int, denom: int): div_t;
        fn pure ldiv(numer: long, denom: long): ldiv_t;
        fn pure lldiv(numer: long, denom: long): lldiv_t;
        fn pure mblen(s: string, n: size_t): int;
        // fn pure mbtowc(pwc: *wchar_t, s: string, n: size_t): int;
        // fn pure wctomb(s: string, wc: wchar_t): int;
        // fn pure mbstowcs(pwcs: *wchar_t, s: string, n: size_t): size_t;
        // fn pure wcstombs(s: string, pwcs: *wchar_t, n: size_t): size_t;
        fn pure alloca(size: size_t): *void;
    }
}
