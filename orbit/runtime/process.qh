///////////////////////////////////////////////////////////////////////////////
///                                                                         ///
///    ░▒▓██████▓▒░  ░▒▓███████▓▒░  ░▒▓███████▓▒░  ░▒▓█▓▒░ ░▒▓████████▓▒░   ///
///   ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///   ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///   ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓███████▓▒░  ░▒▓███████▓▒░  ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///   ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///   ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///    ░▒▓██████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓███████▓▒░  ░▒▓█▓▒░    ░▒▓█▓▒░       ///
///                                                                         ///
///     * ORBIT STANDARD LIBRARY - The official stdlib for QUIX.            ///
///     * Copyright (c) 2024, Wesley C. Jones. All rights reserved.         ///
///     * License terms may be found in the LICENSE file.                   ///
///                                                                         ///
///////////////////////////////////////////////////////////////////////////////

@lang v1
@encoding utf8
@pragma version 1.0.0

import sysio::io;

subsystem orbit::runtime::process: sysio::io {
    /// @brief Panic and exit the program with an error message.
    /// @param msg The error message to display.
    /// @param trace Whether to display a stack trace.
    /// @warning This function will leak memory addresses if `trace` is `true`.
    fn tsafe impure noreturn panic(msg: str, trace: bool = false);

    /// @brief Abort the program and generate a core dump.
    /// @warning This function will not display an error message.
    fn tsafe impure noreturn abort();

    /// @brief Exit the program with a status code.
    /// @param code The status code to return to the operating system.
    /// @note A status code of `0` indicates success.
    /// @note This function will call all registered callback functions in the
    ///       reverse order of their registration.
    fn tsafe impure noreturn exit(code: int);

    /// @brief Exit the program with a status message.
    /// @param str The message to display.
    /// @note The status code is calculated using a hash of the message. The status code
    ///       will only be status if the message is empty.
    /// @note This function will call all registered callback functions in the
    ///       reverse order of their registration.
    fn tsafe impure noreturn exits(msg: str);

    /// @brief A function to be called when the program exits.
    /// @param rank The order in which the function was registered. 0 is the first and therefore, is called last.
    typedef fn tsafe impure (rank: i32): void atexit_fn;

    /// @brief Register a function to be called when the program exits.
    /// @param fn The function to call.
    fn tsafe impure atexit(fn: atexit_fn): void;

    /// @brief Unregister a function from being called when the program exits.
    /// @param fn The function to remove.
    fn tsafe impure rmexit(fn: atexit_fn): bool;

    /// @brief Get the current working directory.
    /// @return The current working directory.
    fn tsafe impure cwd(): str;
};
