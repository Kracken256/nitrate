{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "nitrate",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#singleQuotedString"
    },
    {
      "include": "#multiLineComment"
    },
    {
      "include": "#singleLineCommentTypeA"
    },
    {
      "include": "#singleLineCommentTypeB"
    },
    {
      "include": "#singleLineCommentTypeC"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#commonTypes"
    },
    {
      "include": "#commonIdentifier"
    },
    {
      "include": "#float"
    },
    {
      "include": "#integer"
    },
    {
      "include": "#preprocessorInvoke"
    },
    {
      "include": "#proprocessorFunctionA"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.nitrate",
          "match": "\\b(using|subsystem|import|pub|sec|pro|type|let|var|const|static|template|hyperparam|struct|region|group|class|union|opaque|enum|fstring|with|fn|noexcept|foreign|impure|tsafe|pure|quasipure|retropure|crashpoint|inline|unsafe|safe|volatile|promise|if|else|for|while|do|switch|case|default|break|continue|ret|retif|retz|retv|form|foreach|try|catch|try|__asm__|undef|null|true|false|as|is|in|sizeof|alignof|typeof|offsetof|bitcast_as|bitsizeof|out)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.nitrate",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.nitrate",
          "match": "\\\\."
        }
      ]
    },
    "singleQuotedString": {
      "name": "string.quoted.single.nitrate",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.nitrate",
          "match": "\\\\."
        }
      ]
    },
    "multiLineComment": {
      "name": "comment.block.nitrate",
      "begin": "/\\*",
      "end": "\\*/"
    },
    "singleLineCommentTypeA": {
      "name": "comment.line.nitrate",
      "match": "//.*"
    },
    "singleLineCommentTypeB": {
      "name": "comment.line.nitrate",
      "match": "#.*"
    },
    "singleLineCommentTypeC": {
      "name": "comment.line.nitrate",
      "match": "~>.*"
    },
    "commonIdentifier": {
      "name": "variable.other.common.nitrate",
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
    },
    "commonTypes": {
      "patterns": [
        {
          "name": "storage.type.nitrate",
          "match": "\\b(u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|f16|f32|f64|f128|u1|string|str|void|usize|isize|any|bool|solid)\\b"
        }
      ]
    },
    "integer": {
      "name": "constant.numeric.integer.nitrate",
      "match": "\\b(0x[0-9a-fA-F_]+(_\\w+)?|0b[01_]+(_\\w+)?|0o[0-7_]+(_\\w+)?|0d[0-9_]+|[\\d_]+(_\\w+)?)\\b"
    },
    "float": {
      "name": "constant.numeric.float.nitrate",
      "match": "\\b(\\d[\\d_]*\\.\\d[\\d_]*([eE][+-]?\\d[\\d_]*)?|\\d[\\d_]*[eE][+-]?\\d[\\d_]*(\\.\\d[\\d_]*)?)\\b"
    },
    "preprocessorInvoke": {
      "name": "meta.preprocessor.nitrate",
      "match": "@[\\w:]+"
    },
    "proprocessorFunctionA": {
      "begin": "@\\([\\s\n]*fn",
      "end": "\\}\\)$",
      "patterns": [
        {
          "include": "source.lua"
        }
      ]
    }
  },
  "scopeName": "source.n"
}