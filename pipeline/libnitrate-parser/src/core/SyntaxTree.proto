// Contents: Nitrate language syntax tree protobuf definition.
// Author: Wesley Jones

syntax = "proto2";

package nitrate.parser.SyntaxTree;

message SourceLocationRange {
  message SourceLocation {
    required uint32 line = 1;
    required uint32 column = 2;
    required uint32 offset = 3;
    optional string file = 4;
  }

  optional SourceLocation start = 1;
  optional SourceLocation end = 2;
}

message UserComment {
  required string comment = 1;
}

message Base {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;
}

message CallArgument {
  required string name = 1;
  required Expr value = 2;
}

enum FunctionPurity {
  Impure = 0;
  Impure_TSafe = 1;
  Pure = 2;
  Quasi = 3;
  Retro = 4;
}

message FunctionParameter {
  required string name = 1;
  required Type type = 2;
  optional Expr default_value = 3;
}

enum Vis {
  Public = 0;
  Private = 1;
  Protected = 2;
}

message TemplateParameters {
  message TemplateParameter {
    required string name = 1;
    required Type type = 2;
    optional Expr default_value = 3;
  }

  repeated TemplateParameter parameters = 1;
}

///===--------------------------------------------------------------------===///

message NamedTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  required string name = 7;
}

message InferTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message TemplateType {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  required Type base = 7;
  repeated CallArgument arguments = 8;
}

message U1 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message U8 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message U16 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message U32 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message U64 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message U128 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message I8 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message I16 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message I32 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message I64 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message I128 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message F16 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message F32 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message F64 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message F128 {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message VoidTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message PtrTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  required Type pointee = 7;
  required bool volatile = 8;
}

message OpaqueTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  required string name = 7;
}

message TupleTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  repeated Type elements = 7;
}

message ArrayTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  required Type element_type = 7;
  required Expr element_count = 8;
}

message RefTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  required Type pointee = 7;
}

message FuncTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  repeated Expr attributes = 7;
  repeated FunctionParameter parameters = 8;
  required bool variadic = 9;
  required FunctionPurity purity = 10;
  required Type return_type = 11;
}

///===--------------------------------------------------------------------===///

enum Operator {
  Plus = 0;         /* '+':    Addition operator */
  Minus = 1;        /* '-':    Subtraction operator */
  Times = 2;        /* '*':    Multiplication operator */
  Slash = 3;        /* '/':    Division operator */
  Percent = 4;      /* '%':    Modulus operator */
  BitAnd = 5;       /* '&':    Bitwise AND operator */
  BitOr = 6;        /* '|':    Bitwise OR operator */
  BitXor = 7;       /* '^':    Bitwise XOR operator */
  BitNot = 8;       /* '~':    Bitwise NOT operator */
  LShift = 9;       /* '<<':   Left shift operator */
  RShift = 10;      /* '>>':   Right shift operator */
  ROTL = 11;        /* '<<<':  Rotate left operator */
  ROTR = 12;        /* '>>>':  Rotate right operator */
  LogicAnd = 13;    /* '&&':   Logical AND operator */
  LogicOr = 14;     /* '||':   Logical OR operator */
  LogicXor = 15;    /* '^^':   Logical XOR operator */
  LogicNot = 16;    /* '!':    Logical NOT operator */
  LT = 17;          /* '<':    Less than operator */
  GT = 18;          /* '>':    Greater than operator */
  LE = 19;          /* '<=':   Less than or equal to operator */
  GE = 20;          /* '>=':   Greater than or equal to operator */
  Eq = 21;          /* '==':   Equal to operator */
  NE = 22;          /* '!=':   Not equal to operator */
  Set = 23;         /* '=':    Assignment operator */
  PlusSet = 24;     /* '+=':   Addition assignment operator */
  MinusSet = 25;    /* '-=':   Subtraction assignment operator */
  TimesSet = 26;    /* '*=':   Multiplication assignment operator */
  SlashSet = 27;    /* '/=':   Division assignment operator */
  PercentSet = 28;  /* '%=':   Modulus assignment operator */
  BitAndSet = 29;   /* '&=':   Bitwise AND assignment operator */
  BitOrSet = 30;    /* '|=':   Bitwise OR assignment operator */
  BitXorSet = 31;   /* '^=':   Bitwise XOR assignment operator */
  LogicAndSet = 32; /* '&&=':  Logical AND assignment operator */
  LogicOrSet = 33;  /* '||=':  Logical OR assignment operator */
  LogicXorSet = 34; /* '^^=':  Logical XOR assignment operator */
  LShiftSet = 35;   /* '<<=':  Left shift assignment operator */
  RShiftSet = 36;   /* '>>=':  Right shift assignment operator */
  ROTLSet = 37;     /* '<<<=': Rotate left assignment operator */
  ROTRSet = 38;     /* '>>>=': Rotate right assignment operator */
  Inc = 39;         /* '++':   Increment operator */
  Dec = 40;         /* '--':   Decrement operator */
  As = 41;          /* 'as':   Type cast operator */
  BitcastAs = 42;   /* 'bitcast_as': Bitcast operator */
  In = 43;          /* 'in':         Generic membership operator */
  Out = 44;         /* 'out':        Output operator */
  Sizeof = 45;      /* 'sizeof':     Size of operator */
  Bitsizeof = 46;   /* 'bitsizeof':  Bit size of operator */
  Alignof = 47;     /* 'alignof':    Alignment of operator */
  Typeof = 48;      /* 'typeof':     Type of operator */
  Comptime = 49;    /* 'comptime':   Compile-time operator */
  Dot = 50;         /* '.':          Dot operator */
  Range = 51;       /* '..':         Range operator */
  Ellipsis = 52;    /* '...':        Ellipsis operator */
  Arrow = 53;       /* '=>':         Arrow operator */
  Question = 54;    /* '?':          Question operator */
};

message StmtExpr {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Stmt statement = 4;
}

message TypeExpr {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Type type = 4;
}

message Unary {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Operator operator = 4;
  required Expr operand = 5;
}

message Binary {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Operator operator = 4;
  required Expr left = 5;
  required Expr right = 6;
}

message PostUnary {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Operator operator = 4;
  required Expr operand = 5;
}

message Ternary {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr condition = 4;
  required Expr true_branch = 5;
  required Expr false_branch = 6;
}

message Integer {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  /* Don't forget to verify me! */
  /* I'm a plain integer in range [0, 2^128). */
  required string number = 4;
}

message Float {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  /* Don't forget to verify me! */
  /* I'm in plain decimal form. */
  required string number = 4;
}

message Boolean {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required bool value = 4;
}

message String {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required bytes text = 4;
}

message Character {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  /* Range: [0, 2^8). */
  required uint32 char = 4;
}

message Null {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;
}

message Undefined {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;
}

message Call {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr callee = 4;
  repeated CallArgument arguments = 5;
}

message TemplateCall {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr callee = 4;
  repeated CallArgument template_arguments = 5;
  repeated CallArgument arguments = 6;
}

message List {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  repeated Expr elements = 4;
}

message Assoc {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr key = 4;
  required Expr value = 5;
}

message Index {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr base = 4;
  required Expr index = 5;
}

message Slice {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr base = 4;
  required Expr start = 5;
  required Expr end = 6;
}

message FString {
  message FStringTerm {
    oneof part {
      string text = 1;
      Expr expr = 2;
    }
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  repeated FStringTerm elements = 4;
}

message Identifier {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string name = 4;
}

message Sequence {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  repeated Expr elements = 4;
}

///===--------------------------------------------------------------------===///

message ExprStmt {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr expression = 4;
}

message Block {
  enum SafetyMode {
    Unspecified = 0;
    Safe = 1;
    Unsafe = 2;
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required SafetyMode guarantor = 4;
  repeated Stmt statements = 5;
}

message Variable {
  enum VariableKind {
    Const = 0;
    Var = 1;
    Let = 2;
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required VariableKind kind = 4;
  required string name = 5;
  optional Type type = 6;
  optional Expr initial_value = 7;
  repeated Expr attributes = 8;
}

message Assembly {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string code = 4;
  repeated Expr arguments = 5;
}

message If {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr condition = 4;
  required Stmt true_branch = 5;
  optional Stmt false_branch = 6;
}

message While {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr condition = 4;
  required Stmt body = 5;
}

message For {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Stmt init = 4;
  optional Expr condition = 5;
  optional Expr step = 6;
  required Stmt body = 7;
}

message Foreach {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string index_name = 4;
  required string value_name = 5;
  required Expr expression = 6;
  required Stmt body = 7;
}

message Break {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;
}

message Continue {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;
}

message Return {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr value = 4;
}

message ReturnIf {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr condition = 4;
  required Expr value = 5;
}

message Case {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr condition = 4;
  required Stmt body = 5;
}

message Switch {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr condition = 4;
  repeated Case cases = 5;
  optional Stmt default = 6;
}

message Export {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Vis visibility = 4;
  required string abi_name = 5;
  repeated Expr attributes = 6;
  required Stmt body = 7;
}

message Scope {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string name = 4;
  repeated string dependencies = 5;
  required Stmt body = 6;
}

message Typedef {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string name = 4;
  required Type type = 5;
}

message Enum {
  message Field {
    required string name = 1;
    optional Expr value = 2;
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string name = 4;
  optional Type base_type = 5;
  repeated Field items = 6;
}

message Function {
  message Capture {
    required string name = 1;
    required bool is_reference = 2;
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string name = 4;
  required FunctionPurity purity = 5;
  required Type return_type = 6;
  optional TemplateParameters template_parameters = 7;
  repeated FunctionParameter parameters = 8;
  required bool variadic = 9;
  repeated Capture captures = 10;
  optional Expr precondition = 11;
  optional Expr postcondition = 12;
  repeated Expr attributes = 13;
  optional Stmt body = 14;
}

message Struct {
  enum AggregateKind {
    Region_ = 0;
    Struct_ = 1;
    Group_ = 2;
    Class_ = 3;
    Union_ = 4;
  }

  message Field {
    required string name = 1;
    optional Expr default_value = 3;
    required Type type = 2;
    required Vis visibility = 4;
    required bool is_static = 5;
  }

  message Method {
    required Stmt func = 1;
    required Vis visibility = 2;
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required AggregateKind kind = 4;
  required string name = 5;
  optional TemplateParameters template_parameters = 6;
  repeated string names = 7;
  repeated Expr attributes = 8;
  repeated Field fields = 9;
  repeated Method methods = 10;
  repeated Method static_methods = 11;
}

message Expr {
  oneof node {
    Base base = 1;
    StmtExpr stmt_expr = 2;
    TypeExpr type_expr = 3;
    Unary unary = 4;
    Binary binary = 5;
    PostUnary post_unary = 6;
    Ternary ternary = 7;
    Integer integer = 8;
    Float float = 9;
    Boolean boolean = 10;
    String string = 11;
    Character character = 12;
    Null null = 13;
    Undefined undefined = 14;
    Call call = 15;
    TemplateCall template_call = 16;
    List list = 17;
    Assoc assoc = 18;
    Index index = 19;
    Slice slice = 20;
    FString fstring = 21;
    Identifier identifier = 22;
    Sequence sequence = 23;
  }
}

message Stmt {
  oneof node {
    Base base = 1;
    ExprStmt expr_stmt = 2;
    Block block = 3;
    Variable variable = 4;
    Assembly assembly = 5;
    If if = 6;
    While while = 7;
    For for = 8;
    Foreach foreach = 9;
    Break break = 10;
    Continue continue = 11;
    Return return = 12;
    ReturnIf return_if = 13;
    Case case = 14;
    Switch switch = 15;
    Export export = 16;
    Scope scope = 17;
    Typedef typedef = 18;
    Enum enum = 19;
    Function function = 20;
    Struct struct = 21;
  }
}

message Type {
  oneof node {
    Base base = 1;
    NamedTy named = 2;
    InferTy infer = 3;
    TemplateType template = 4;
    U1 u1 = 5;
    U8 u8 = 6;
    U16 u16 = 7;
    U32 u32 = 8;
    U64 u64 = 9;
    U128 u128 = 10;
    I8 i8 = 11;
    I16 i16 = 12;
    I32 i32 = 13;
    I64 i64 = 14;
    I128 i128 = 15;
    F16 f16 = 16;
    F32 f32 = 17;
    F64 f64 = 18;
    F128 f128 = 19;
    VoidTy void = 20;
    PtrTy ptr = 21;
    OpaqueTy opaque = 22;
    TupleTy tuple = 23;
    ArrayTy array = 24;
    RefTy ref = 25;
    FuncTy func = 26;
  }
}

message Root {
  oneof node {
    Base base = 1;
    StmtExpr stmt_expr = 2;
    TypeExpr type_expr = 3;
    Unary unary = 4;
    Binary binary = 5;
    PostUnary post_unary = 6;
    Ternary ternary = 7;
    Integer integer = 8;
    Float float = 9;
    Boolean boolean = 10;
    String string = 11;
    Character character = 12;
    Null null = 13;
    Undefined undefined = 14;
    Call call = 15;
    TemplateCall template_call = 16;
    List list = 17;
    Assoc assoc = 18;
    Index index = 19;
    Slice slice = 20;
    FString fstring = 21;
    Identifier identifier = 22;
    Sequence sequence = 23;
    ExprStmt expr = 25;
    Block block = 26;
    Variable variable = 27;
    Assembly assembly = 28;
    If if = 29;
    While while = 30;
    For for = 31;
    Foreach foreach = 32;
    Break break = 33;
    Continue continue = 34;
    Return return = 35;
    ReturnIf return_if = 36;
    Case case = 37;
    Switch switch = 38;
    Export export = 39;
    Scope scope = 40;
    Typedef typedef = 41;
    Enum enum = 42;
    Function function = 43;
    Struct struct = 44;
    NamedTy named = 45;
    InferTy infer = 46;
    TemplateType template = 47;
    U1 u1 = 48;
    U8 u8 = 49;
    U16 u16 = 50;
    U32 u32 = 51;
    U64 u64 = 52;
    U128 u128 = 53;
    I8 i8 = 54;
    I16 i16 = 55;
    I32 i32 = 56;
    I64 i64 = 57;
    I128 i128 = 58;
    F16 f16 = 59;
    F32 f32 = 60;
    F64 f64 = 61;
    F128 f128 = 62;
    VoidTy void = 63;
    PtrTy ptr = 64;
    OpaqueTy opaque = 65;
    TupleTy tuple = 66;
    ArrayTy array = 67;
    RefTy ref = 68;
    FuncTy func = 69;
  }
}
