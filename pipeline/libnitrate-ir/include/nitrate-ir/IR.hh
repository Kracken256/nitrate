////////////////////////////////////////////////////////////////////////////////
///                                                                          ///
///     .-----------------.    .----------------.     .----------------.     ///
///    | .--------------. |   | .--------------. |   | .--------------. |    ///
///    | | ____  _____  | |   | |     ____     | |   | |    ______    | |    ///
///    | ||_   _|_   _| | |   | |   .'    `.   | |   | |   / ____ `.  | |    ///
///    | |  |   \ | |   | |   | |  /  .--.  \  | |   | |   `'  __) |  | |    ///
///    | |  | |\ \| |   | |   | |  | |    | |  | |   | |   _  |__ '.  | |    ///
///    | | _| |_\   |_  | |   | |  \  `--'  /  | |   | |  | \____) |  | |    ///
///    | ||_____|\____| | |   | |   `.____.'   | |   | |   \______.'  | |    ///
///    | |              | |   | |              | |   | |              | |    ///
///    | '--------------' |   | '--------------' |   | '--------------' |    ///
///     '----------------'     '----------------'     '----------------'     ///
///                                                                          ///
///   * NITRATE TOOLCHAIN - The official toolchain for the Nitrate language. ///
///   * Copyright (C) 2024 Wesley C. Jones                                   ///
///                                                                          ///
///   The Nitrate Toolchain is free software; you can redistribute it or     ///
///   modify it under the terms of the GNU Lesser General Public             ///
///   License as published by the Free Software Foundation; either           ///
///   version 2.1 of the License, or (at your option) any later version.     ///
///                                                                          ///
///   The Nitrate Toolcain is distributed in the hope that it will be        ///
///   useful, but WITHOUT ANY WARRANTY; without even the implied warranty of ///
///   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      ///
///   Lesser General Public License for more details.                        ///
///                                                                          ///
///   You should have received a copy of the GNU Lesser General Public       ///
///   License along with the Nitrate Toolchain; if not, see                  ///
///   <https://www.gnu.org/licenses/>.                                       ///
///                                                                          ///
////////////////////////////////////////////////////////////////////////////////

#ifndef __NITRATE_IR_IR_H__
#define __NITRATE_IR_IR_H__

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <memory>
#include <nitrate-ir/IRFwd.hh>
#include <nitrate-ir/IRGraph.hh>

namespace ncc::parse {
  class Base;
}

namespace ncc::ir {
  typedef enum nr_serial_t {
    IR_SERIAL_CODE = 0, /* Human readable ASCII text */
  } nr_serial_t;

  /**
   * @brief Serialize a QModule instance to a FILE stream.
   *
   * @param mod The QModule or NULL.
   * @param node Pointer to the node to serialize.
   * @param mode The serialization mode.
   * @param out The FILE stream to serialize to.
   * @param outlen Number of bytes written to the stream (if not NULL).
   * @param argcnt Number of additional variadic arguments. 0 is valid always.
   * @param ... Additional arguments to pass to the serialization function. See
   * the documentation for the specific serialization mode for more information.
   *
   * @return True if the serialization was successful, false otherwise.
   *
   * @note This function is thread safe.
   */
  bool nr_write(IRModule *mod, const Expr *node, nr_serial_t mode, FILE *out,
                size_t *outlen, uint32_t argcnt, ...);

  std::unique_ptr<IRModule> nr_lower(ncc::parse::Base *base, const char *name,
                                     bool diagnostics);

  typedef void (*nr_node_cb)(Expr *cur, uintptr_t userdata);

  typedef enum {
    IR_LEVEL_DEBUG = 0,
    IR_LEVEL_INFO = 1,
    IR_LEVEL_WARN = 2,
    IR_LEVEL_ERROR = 3,
    IR_LEVEL_MAX = 5,
    IR_LEVEL_DEFAULT = IR_LEVEL_WARN,
  } nr_level_t;

  /**
   * @brief A callback function to facilitate the communication of a report
   * generated by the QModule diagnostics subsystem.
   *
   * @param utf8text UTF-8 encoded text of the report (null terminated).
   * @param size Size of the report in bytes.
   * @param level The severity level of the report.
   * @param data User supplied data.
   *
   * @note `utf8text` is not valid after the callback function returns.
   *
   * @note This function shall be thread safe.
   */
  typedef void (*nr_report_cb)(const uint8_t *utf8text, size_t size,
                               nr_level_t level, uintptr_t data);

  typedef enum nr_diag_format_t {
    /**
     * @brief Display in a modern terminal emulator with UTF-8, RGB colors,
     * ANSI-box drawing, and full diagnostics with source highlighting.
     * @note Includes everything the user would expect from a mainstream
     * compiler.
     */
    IR_DIAG_COLOR = 100,

  } nr_diag_format_t;

  /**
   * @brief Read diagnostic reports generated by the QModule diagnostics
   * subsystem.
   *
   * @param nr QModule instance to read diagnostics from.
   * @param format Format for the diagnostics reporting.
   * @param cb Callback function to call for each report.
   * @param data User supplied data to pass to the callback function.
   *
   * @note `data` is arbitrary it will be passed to the callback function.
   * @note If `!cb`, the number of reports that would have been processed is
   * returned.
   *
   * @note This function will not dispose of any reports. Calling this function
   * multiple times with the same arguments will result in the same reports
   * being emitted.
   *
   * @warning The order that the reports are emitted is unspecified. It may be
   * inconsistent between calls to this function.
   *
   * @note This function is thread safe.
   */
  void nr_diag_read(IRModule *nr, nr_diag_format_t format, nr_report_cb cb,
                    uintptr_t data);
}  // namespace ncc::ir

#endif  // __NITRATE_IR_IR_H__
